syntax = "proto3";

import "schema.proto";
import "google/protobuf/empty.proto";
import "google/protobuf/timestamp.proto";

package lc.schema;

option go_package = "github.com/vchain-us/ledger-compliance/server/schema";

message TamperReport {
  uint64 index = 1;
  bytes key = 2;
  bytes root = 3;
}

message ReportOptions{
  TamperReport payload = 1;
  immudb.schema.Signature signature = 2;
}

message DataValue {
  string name = 1;
  string type = 2;
  bytes value = 3;
}

message Data {
  string key = 1;
  int64 msgID = 2;
  string dbName = 3;
  string tableName = 4;
  string operation = 5;
  bytes data = 6;
}

message Response {
  int32 status = 1;
  string msg = 2;
  int64 msgID = 3;
  immudb.schema.VerifiableTx VerifiableTx = 4;
  immudb.schema.ImmutableState state = 5;
}

message VerifiableItemExt {
  immudb.schema.VerifiableEntry item = 1;
  google.protobuf.Timestamp timestamp = 2;
  google.protobuf.Timestamp apikeyRevoked = 3;
  string ledgerName = 4;
  string publicKey = 5;
  string UID = 6;
}


message ItemExt {
  immudb.schema.Entry item = 1;
  google.protobuf.Timestamp timestamp = 2;
  google.protobuf.Timestamp apikeyRevoked = 3;
  string ledgerName = 4;
  string publicKey = 5;
  string UID = 6;
}

message ItemExtList {
  repeated ItemExt items = 1;
}


message ZItemExt {
  immudb.schema.ZEntry item = 1;
  google.protobuf.Timestamp timestamp = 2;
  google.protobuf.Timestamp apikeyRevoked = 3;
  string ledgerName = 4;
  string publicKey = 5;
  string UID = 6;
}

message ZItemExtList {
  repeated ZItemExt items = 1;
}

message Features {
  repeated string feat = 1;
  string version = 2;
  string buildTime = 3;
  string component = 4;
}

message VerifiableGetExtMultiRequest {
  repeated immudb.schema.VerifiableGetRequest requests = 1;
}

message VerifiableGetExtMultiResponse {
  repeated VerifiableItemExt items = 1;
  repeated string errors = 2;
}

message SetMultiRequest {
  repeated immudb.schema.SetRequest requests = 1;
}

message SetMultiResponse {
  repeated immudb.schema.TxHeader transactions = 1;
  repeated string errors = 2;
}

message VCNAttachment {
  bytes content = 1;
  bytes signature = 2;
}

message VCNDependency {
  enum Type {
    Direct = 0;
    Indirect = 1;
    Base = 2;
  }
  string hash = 1;
  Type type = 2;
}

message VCNArtifact {
  bytes artifact = 1;
  bytes signature = 2;
  repeated VCNDependency dependencies = 3;
  repeated VCNAttachment attachments = 4;
}

message VCNArtifactsRequest {
  repeated VCNArtifact artifacts = 1;
  google.protobuf.Timestamp signedAt = 2;
}

message VCNArtifactsGetRequest {
  repeated string hashes = 1;
  bool verify = 2;
  uint64 proveSinceTx = 3;
  string UID = 4;
  string signerID = 5;
}

message Proof {
  immudb.schema.VerifiableTx verifiableTx = 1;
  immudb.schema.InclusionProof inclusionProof = 2;
  immudb.schema.KVMetadata metadata = 3;
  bytes immudbFullKey = 4;
}

message VCNArtifactsResponse {
  immudb.schema.TxHeader transaction = 1;
}

message VCNSearchRequest {
  enum Type {
    Artifact = 0;
    Dependencies = 1;
    WhatIncludes = 2;
    ArtifactTimed = 4;
    Attachment = 5;
    ByApiKey = 6;
    ByName = 7;
    History = 8;
  }
  enum ArtifactType {
    Direct = 0;
    Indirect = 1;
    Base = 2;
  }
  string hash = 1;
  string signerID = 2;
  ArtifactType aType = 3;
  Type type = 4;
  uint64 Limit = 5;
  bool Desc = 6;
  int64 startTS = 8;
  int64 endTS = 9;
  string attachName = 10;
  string artifactName = 11;
  string UID = 12;
}

message Entry {
  bytes key = 1;
  bytes value = 2;
  uint64 tx = 3;
  google.protobuf.Timestamp timestamp = 4;
  google.protobuf.Timestamp apikeyRevoked = 5;
  string ledgerName = 6;
  Proof proof = 7;
  string publicKey = 8;
  string UID = 9;
}

message EntryList {
  repeated Entry entries = 1;
}

message VCNLabelsUpdateRequest {
  enum VCNLabelsOpType {
    ADD = 0;
    DELETE = 1;
  }

  message VCNLabelsOp {
    VCNLabelsOpType opType = 1;
    repeated string labels = 2;
  }

  string hash = 1;
  repeated VCNLabelsOp ops = 2;
}

message VCNLabelsUpdateResponse {
  immudb.schema.TxHeader transaction = 1;
}

message LabelsSetRequest {
  string hash = 1;
  repeated string labels = 2;
}

message VCNLabelsSetRequest {
  repeated LabelsSetRequest request = 1;
}

message VCNLabelsSetResponse {
  immudb.schema.TxHeader transaction = 1;
}

message LabelsGetRequest {
  string hash = 1;
  string signerID = 2;
}

message VCNLabelsGetRequest {
  repeated LabelsGetRequest request = 1;
}

message LabelsGetResponse {
  string hash = 1;
  repeated string labels = 2;
}

message VCNLabelsGetResponse {
  repeated LabelsGetResponse response = 1;
}

message VCNGetAttachmentRequest{
  string signerID = 1;
  string artifactHash = 2;
  string attachmentHash = 3;
}

message VCNGetAttachmentResponse{
  bytes attachment = 1;
}

message VCNGetClientSignatureRequest{
  string artifactHash = 1;
  string signerID = 2;
  uint64 atTx = 3;
}

message VCNGetClientSignatureResponse{
  bytes signatureJSON = 1;
}

service LcService {
  rpc VCNSetArtifacts (VCNArtifactsRequest) returns (VCNArtifactsResponse){};
  rpc VCNSearchArtifacts(VCNSearchRequest) returns (EntryList){};
  rpc VCNGetArtifacts (VCNArtifactsGetRequest) returns (EntryList){};
  rpc VCNLabelsGet(VCNLabelsGetRequest) returns (VCNLabelsGetResponse){};
  rpc VCNLabelsSet(VCNLabelsSetRequest) returns (VCNLabelsSetResponse){};
  rpc VCNLabelsUpdate(VCNLabelsUpdateRequest) returns (VCNLabelsUpdateResponse){};
  rpc VCNGetAttachment(VCNGetAttachmentRequest) returns (VCNGetAttachmentResponse){};
  rpc VCNGetClientSignature(VCNGetClientSignatureRequest) returns (VCNGetClientSignatureResponse){};
  // mixed
  rpc CurrentState (google.protobuf.Empty) returns (immudb.schema.ImmutableState){};
  rpc Health (google.protobuf.Empty) returns (immudb.schema.HealthResponse){};
  // ledger compliance extensions
  rpc ReportTamper(ReportOptions) returns (google.protobuf.Empty){};
  rpc Feats(google.protobuf.Empty) returns (Features){};

  // immudb primitives
  // setters and getters
  // immudb primitives are deprecated
  rpc Set (immudb.schema.SetRequest) returns (immudb.schema.TxHeader){
    option deprecated = true;
  };
  rpc SetMulti (SetMultiRequest) returns (SetMultiResponse){
    option deprecated = true;
  };
  rpc Get (immudb.schema.KeyRequest) returns (immudb.schema.Entry){
    option deprecated = true;
  };
  rpc VerifiableSet (immudb.schema.VerifiableSetRequest) returns (immudb.schema.VerifiableTx){
    option deprecated = true;
  };
  rpc VerifiableGet (immudb.schema.VerifiableGetRequest) returns (immudb.schema.VerifiableEntry){
    option deprecated = true;
  };
  // batch
  rpc GetAll (immudb.schema.KeyListRequest) returns (immudb.schema.Entries){
    option deprecated = true;
  };
  rpc ExecAll (immudb.schema.ExecAllRequest) returns (immudb.schema.TxHeader) {
    option deprecated = true;
  };
  // scanners
  rpc Scan(immudb.schema.ScanRequest) returns (immudb.schema.Entries){
    option deprecated = true;
  };
  rpc History(immudb.schema.HistoryRequest) returns (immudb.schema.Entries){
    option deprecated = true;
  };
  rpc ZAdd (immudb.schema.ZAddRequest) returns (immudb.schema.TxHeader){
    option deprecated = true;
  };
  rpc VerifiableZAdd (immudb.schema.VerifiableZAddRequest) returns (immudb.schema.VerifiableTx){
    option deprecated = true;
  };
  rpc ZScan (immudb.schema.ZScanRequest) returns (immudb.schema.ZEntries){
    option deprecated = true;
  };
  rpc SendData (stream Data) returns (stream Response){
    option deprecated = true;
  };
  // ledger compliance extensions - items extended with additional properties managed by LC backend (date)
  rpc VerifiableGetExt(immudb.schema.VerifiableGetRequest) returns (VerifiableItemExt){
    option deprecated = true;
  };
  rpc VerifiableGetExtMulti(VerifiableGetExtMultiRequest) returns (VerifiableGetExtMultiResponse){
    option deprecated = true;
  };
  rpc ZScanExt (immudb.schema.ZScanRequest) returns (ZItemExtList){
    option deprecated = true;
  };
  rpc HistoryExt(immudb.schema.HistoryRequest) returns (ItemExtList){
    option deprecated = true;
  };
  // streams
  rpc streamGet(immudb.schema.KeyRequest) returns (stream immudb.schema.Chunk) {
    option deprecated = true;
  };
  rpc streamSet(stream immudb.schema.Chunk) returns (immudb.schema.TxHeader) {
    option deprecated = true;
  };
  rpc streamVerifiableGet(immudb.schema.VerifiableGetRequest) returns (stream immudb.schema.Chunk) {
    option deprecated = true;
  };
  rpc streamVerifiableSet(stream immudb.schema.Chunk) returns (immudb.schema.VerifiableTx) {
    option deprecated = true;
  };
  rpc streamScan(immudb.schema.ScanRequest) returns (stream immudb.schema.Chunk) {
    option deprecated = true;
  };
  rpc streamZScan(immudb.schema.ZScanRequest) returns (stream immudb.schema.Chunk) {
    option deprecated = true;
  };
  rpc streamHistory(immudb.schema.HistoryRequest) returns (stream immudb.schema.Chunk) {
    option deprecated = true;
  };
  rpc streamExecAll(stream immudb.schema.Chunk) returns (immudb.schema.TxHeader) {
    option deprecated = true;
  };
}
