// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.19.4
// source: lc.proto

package schema

import (
	context "context"
	schema "github.com/codenotary/immudb/pkg/api/schema"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// LcServiceClient is the client API for LcService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type LcServiceClient interface {
	// immudb primitives
	// setters and getters
	Set(ctx context.Context, in *schema.SetRequest, opts ...grpc.CallOption) (*schema.TxHeader, error)
	SetMulti(ctx context.Context, in *SetMultiRequest, opts ...grpc.CallOption) (*SetMultiResponse, error)
	VCNSetArtifacts(ctx context.Context, in *VCNArtifactsRequest, opts ...grpc.CallOption) (*VCNArtifactsResponse, error)
	VCNSearchArtifacts(ctx context.Context, in *VCNSearchRequest, opts ...grpc.CallOption) (*EntryList, error)
	VCNGetArtifacts(ctx context.Context, in *VCNArtifactsGetRequest, opts ...grpc.CallOption) (*EntryList, error)
	VCNUriGet(ctx context.Context, in *VCNUriGetRequest, opts ...grpc.CallOption) (*VCNUriGetResponse, error)
	VCNUriSet(ctx context.Context, in *VCNUriSetRequest, opts ...grpc.CallOption) (*VCNUriSetResponse, error)
	VCNUriUpdate(ctx context.Context, in *VCNUriUpdateRequest, opts ...grpc.CallOption) (*VCNUriUpdateResponse, error)
	Get(ctx context.Context, in *schema.KeyRequest, opts ...grpc.CallOption) (*schema.Entry, error)
	VerifiableSet(ctx context.Context, in *schema.VerifiableSetRequest, opts ...grpc.CallOption) (*schema.VerifiableTx, error)
	VerifiableGet(ctx context.Context, in *schema.VerifiableGetRequest, opts ...grpc.CallOption) (*schema.VerifiableEntry, error)
	// batch
	GetAll(ctx context.Context, in *schema.KeyListRequest, opts ...grpc.CallOption) (*schema.Entries, error)
	ExecAll(ctx context.Context, in *schema.ExecAllRequest, opts ...grpc.CallOption) (*schema.TxHeader, error)
	// scanners
	Scan(ctx context.Context, in *schema.ScanRequest, opts ...grpc.CallOption) (*schema.Entries, error)
	History(ctx context.Context, in *schema.HistoryRequest, opts ...grpc.CallOption) (*schema.Entries, error)
	ZAdd(ctx context.Context, in *schema.ZAddRequest, opts ...grpc.CallOption) (*schema.TxHeader, error)
	VerifiableZAdd(ctx context.Context, in *schema.VerifiableZAddRequest, opts ...grpc.CallOption) (*schema.VerifiableTx, error)
	ZScan(ctx context.Context, in *schema.ZScanRequest, opts ...grpc.CallOption) (*schema.ZEntries, error)
	// mixed
	CurrentState(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*schema.ImmutableState, error)
	Health(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*schema.HealthResponse, error)
	// ledger compliance extensions
	ReportTamper(ctx context.Context, in *ReportOptions, opts ...grpc.CallOption) (*emptypb.Empty, error)
	SendData(ctx context.Context, opts ...grpc.CallOption) (LcService_SendDataClient, error)
	// ledger compliance extensions - items extended with additional properties managed by LC backend (date)
	VerifiableGetExt(ctx context.Context, in *schema.VerifiableGetRequest, opts ...grpc.CallOption) (*VerifiableItemExt, error)
	VerifiableGetExtMulti(ctx context.Context, in *VerifiableGetExtMultiRequest, opts ...grpc.CallOption) (*VerifiableGetExtMultiResponse, error)
	ZScanExt(ctx context.Context, in *schema.ZScanRequest, opts ...grpc.CallOption) (*ZItemExtList, error)
	HistoryExt(ctx context.Context, in *schema.HistoryRequest, opts ...grpc.CallOption) (*ItemExtList, error)
	Feats(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*Features, error)
	// streams
	StreamGet(ctx context.Context, in *schema.KeyRequest, opts ...grpc.CallOption) (LcService_StreamGetClient, error)
	StreamSet(ctx context.Context, opts ...grpc.CallOption) (LcService_StreamSetClient, error)
	StreamVerifiableGet(ctx context.Context, in *schema.VerifiableGetRequest, opts ...grpc.CallOption) (LcService_StreamVerifiableGetClient, error)
	StreamVerifiableSet(ctx context.Context, opts ...grpc.CallOption) (LcService_StreamVerifiableSetClient, error)
	StreamScan(ctx context.Context, in *schema.ScanRequest, opts ...grpc.CallOption) (LcService_StreamScanClient, error)
	StreamZScan(ctx context.Context, in *schema.ZScanRequest, opts ...grpc.CallOption) (LcService_StreamZScanClient, error)
	StreamHistory(ctx context.Context, in *schema.HistoryRequest, opts ...grpc.CallOption) (LcService_StreamHistoryClient, error)
	StreamExecAll(ctx context.Context, opts ...grpc.CallOption) (LcService_StreamExecAllClient, error)
}

type lcServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewLcServiceClient(cc grpc.ClientConnInterface) LcServiceClient {
	return &lcServiceClient{cc}
}

func (c *lcServiceClient) Set(ctx context.Context, in *schema.SetRequest, opts ...grpc.CallOption) (*schema.TxHeader, error) {
	out := new(schema.TxHeader)
	err := c.cc.Invoke(ctx, "/lc.schema.LcService/Set", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lcServiceClient) SetMulti(ctx context.Context, in *SetMultiRequest, opts ...grpc.CallOption) (*SetMultiResponse, error) {
	out := new(SetMultiResponse)
	err := c.cc.Invoke(ctx, "/lc.schema.LcService/SetMulti", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lcServiceClient) VCNSetArtifacts(ctx context.Context, in *VCNArtifactsRequest, opts ...grpc.CallOption) (*VCNArtifactsResponse, error) {
	out := new(VCNArtifactsResponse)
	err := c.cc.Invoke(ctx, "/lc.schema.LcService/VCNSetArtifacts", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lcServiceClient) VCNSearchArtifacts(ctx context.Context, in *VCNSearchRequest, opts ...grpc.CallOption) (*EntryList, error) {
	out := new(EntryList)
	err := c.cc.Invoke(ctx, "/lc.schema.LcService/VCNSearchArtifacts", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lcServiceClient) VCNGetArtifacts(ctx context.Context, in *VCNArtifactsGetRequest, opts ...grpc.CallOption) (*EntryList, error) {
	out := new(EntryList)
	err := c.cc.Invoke(ctx, "/lc.schema.LcService/VCNGetArtifacts", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lcServiceClient) VCNUriGet(ctx context.Context, in *VCNUriGetRequest, opts ...grpc.CallOption) (*VCNUriGetResponse, error) {
	out := new(VCNUriGetResponse)
	err := c.cc.Invoke(ctx, "/lc.schema.LcService/VCNUriGet", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lcServiceClient) VCNUriSet(ctx context.Context, in *VCNUriSetRequest, opts ...grpc.CallOption) (*VCNUriSetResponse, error) {
	out := new(VCNUriSetResponse)
	err := c.cc.Invoke(ctx, "/lc.schema.LcService/VCNUriSet", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lcServiceClient) VCNUriUpdate(ctx context.Context, in *VCNUriUpdateRequest, opts ...grpc.CallOption) (*VCNUriUpdateResponse, error) {
	out := new(VCNUriUpdateResponse)
	err := c.cc.Invoke(ctx, "/lc.schema.LcService/VCNUriUpdate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lcServiceClient) Get(ctx context.Context, in *schema.KeyRequest, opts ...grpc.CallOption) (*schema.Entry, error) {
	out := new(schema.Entry)
	err := c.cc.Invoke(ctx, "/lc.schema.LcService/Get", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lcServiceClient) VerifiableSet(ctx context.Context, in *schema.VerifiableSetRequest, opts ...grpc.CallOption) (*schema.VerifiableTx, error) {
	out := new(schema.VerifiableTx)
	err := c.cc.Invoke(ctx, "/lc.schema.LcService/VerifiableSet", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lcServiceClient) VerifiableGet(ctx context.Context, in *schema.VerifiableGetRequest, opts ...grpc.CallOption) (*schema.VerifiableEntry, error) {
	out := new(schema.VerifiableEntry)
	err := c.cc.Invoke(ctx, "/lc.schema.LcService/VerifiableGet", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lcServiceClient) GetAll(ctx context.Context, in *schema.KeyListRequest, opts ...grpc.CallOption) (*schema.Entries, error) {
	out := new(schema.Entries)
	err := c.cc.Invoke(ctx, "/lc.schema.LcService/GetAll", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lcServiceClient) ExecAll(ctx context.Context, in *schema.ExecAllRequest, opts ...grpc.CallOption) (*schema.TxHeader, error) {
	out := new(schema.TxHeader)
	err := c.cc.Invoke(ctx, "/lc.schema.LcService/ExecAll", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lcServiceClient) Scan(ctx context.Context, in *schema.ScanRequest, opts ...grpc.CallOption) (*schema.Entries, error) {
	out := new(schema.Entries)
	err := c.cc.Invoke(ctx, "/lc.schema.LcService/Scan", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lcServiceClient) History(ctx context.Context, in *schema.HistoryRequest, opts ...grpc.CallOption) (*schema.Entries, error) {
	out := new(schema.Entries)
	err := c.cc.Invoke(ctx, "/lc.schema.LcService/History", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lcServiceClient) ZAdd(ctx context.Context, in *schema.ZAddRequest, opts ...grpc.CallOption) (*schema.TxHeader, error) {
	out := new(schema.TxHeader)
	err := c.cc.Invoke(ctx, "/lc.schema.LcService/ZAdd", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lcServiceClient) VerifiableZAdd(ctx context.Context, in *schema.VerifiableZAddRequest, opts ...grpc.CallOption) (*schema.VerifiableTx, error) {
	out := new(schema.VerifiableTx)
	err := c.cc.Invoke(ctx, "/lc.schema.LcService/VerifiableZAdd", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lcServiceClient) ZScan(ctx context.Context, in *schema.ZScanRequest, opts ...grpc.CallOption) (*schema.ZEntries, error) {
	out := new(schema.ZEntries)
	err := c.cc.Invoke(ctx, "/lc.schema.LcService/ZScan", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lcServiceClient) CurrentState(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*schema.ImmutableState, error) {
	out := new(schema.ImmutableState)
	err := c.cc.Invoke(ctx, "/lc.schema.LcService/CurrentState", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lcServiceClient) Health(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*schema.HealthResponse, error) {
	out := new(schema.HealthResponse)
	err := c.cc.Invoke(ctx, "/lc.schema.LcService/Health", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lcServiceClient) ReportTamper(ctx context.Context, in *ReportOptions, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/lc.schema.LcService/ReportTamper", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lcServiceClient) SendData(ctx context.Context, opts ...grpc.CallOption) (LcService_SendDataClient, error) {
	stream, err := c.cc.NewStream(ctx, &LcService_ServiceDesc.Streams[0], "/lc.schema.LcService/SendData", opts...)
	if err != nil {
		return nil, err
	}
	x := &lcServiceSendDataClient{stream}
	return x, nil
}

type LcService_SendDataClient interface {
	Send(*Data) error
	Recv() (*Response, error)
	grpc.ClientStream
}

type lcServiceSendDataClient struct {
	grpc.ClientStream
}

func (x *lcServiceSendDataClient) Send(m *Data) error {
	return x.ClientStream.SendMsg(m)
}

func (x *lcServiceSendDataClient) Recv() (*Response, error) {
	m := new(Response)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *lcServiceClient) VerifiableGetExt(ctx context.Context, in *schema.VerifiableGetRequest, opts ...grpc.CallOption) (*VerifiableItemExt, error) {
	out := new(VerifiableItemExt)
	err := c.cc.Invoke(ctx, "/lc.schema.LcService/VerifiableGetExt", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lcServiceClient) VerifiableGetExtMulti(ctx context.Context, in *VerifiableGetExtMultiRequest, opts ...grpc.CallOption) (*VerifiableGetExtMultiResponse, error) {
	out := new(VerifiableGetExtMultiResponse)
	err := c.cc.Invoke(ctx, "/lc.schema.LcService/VerifiableGetExtMulti", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lcServiceClient) ZScanExt(ctx context.Context, in *schema.ZScanRequest, opts ...grpc.CallOption) (*ZItemExtList, error) {
	out := new(ZItemExtList)
	err := c.cc.Invoke(ctx, "/lc.schema.LcService/ZScanExt", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lcServiceClient) HistoryExt(ctx context.Context, in *schema.HistoryRequest, opts ...grpc.CallOption) (*ItemExtList, error) {
	out := new(ItemExtList)
	err := c.cc.Invoke(ctx, "/lc.schema.LcService/HistoryExt", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lcServiceClient) Feats(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*Features, error) {
	out := new(Features)
	err := c.cc.Invoke(ctx, "/lc.schema.LcService/Feats", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lcServiceClient) StreamGet(ctx context.Context, in *schema.KeyRequest, opts ...grpc.CallOption) (LcService_StreamGetClient, error) {
	stream, err := c.cc.NewStream(ctx, &LcService_ServiceDesc.Streams[1], "/lc.schema.LcService/streamGet", opts...)
	if err != nil {
		return nil, err
	}
	x := &lcServiceStreamGetClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type LcService_StreamGetClient interface {
	Recv() (*schema.Chunk, error)
	grpc.ClientStream
}

type lcServiceStreamGetClient struct {
	grpc.ClientStream
}

func (x *lcServiceStreamGetClient) Recv() (*schema.Chunk, error) {
	m := new(schema.Chunk)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *lcServiceClient) StreamSet(ctx context.Context, opts ...grpc.CallOption) (LcService_StreamSetClient, error) {
	stream, err := c.cc.NewStream(ctx, &LcService_ServiceDesc.Streams[2], "/lc.schema.LcService/streamSet", opts...)
	if err != nil {
		return nil, err
	}
	x := &lcServiceStreamSetClient{stream}
	return x, nil
}

type LcService_StreamSetClient interface {
	Send(*schema.Chunk) error
	CloseAndRecv() (*schema.TxHeader, error)
	grpc.ClientStream
}

type lcServiceStreamSetClient struct {
	grpc.ClientStream
}

func (x *lcServiceStreamSetClient) Send(m *schema.Chunk) error {
	return x.ClientStream.SendMsg(m)
}

func (x *lcServiceStreamSetClient) CloseAndRecv() (*schema.TxHeader, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(schema.TxHeader)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *lcServiceClient) StreamVerifiableGet(ctx context.Context, in *schema.VerifiableGetRequest, opts ...grpc.CallOption) (LcService_StreamVerifiableGetClient, error) {
	stream, err := c.cc.NewStream(ctx, &LcService_ServiceDesc.Streams[3], "/lc.schema.LcService/streamVerifiableGet", opts...)
	if err != nil {
		return nil, err
	}
	x := &lcServiceStreamVerifiableGetClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type LcService_StreamVerifiableGetClient interface {
	Recv() (*schema.Chunk, error)
	grpc.ClientStream
}

type lcServiceStreamVerifiableGetClient struct {
	grpc.ClientStream
}

func (x *lcServiceStreamVerifiableGetClient) Recv() (*schema.Chunk, error) {
	m := new(schema.Chunk)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *lcServiceClient) StreamVerifiableSet(ctx context.Context, opts ...grpc.CallOption) (LcService_StreamVerifiableSetClient, error) {
	stream, err := c.cc.NewStream(ctx, &LcService_ServiceDesc.Streams[4], "/lc.schema.LcService/streamVerifiableSet", opts...)
	if err != nil {
		return nil, err
	}
	x := &lcServiceStreamVerifiableSetClient{stream}
	return x, nil
}

type LcService_StreamVerifiableSetClient interface {
	Send(*schema.Chunk) error
	CloseAndRecv() (*schema.VerifiableTx, error)
	grpc.ClientStream
}

type lcServiceStreamVerifiableSetClient struct {
	grpc.ClientStream
}

func (x *lcServiceStreamVerifiableSetClient) Send(m *schema.Chunk) error {
	return x.ClientStream.SendMsg(m)
}

func (x *lcServiceStreamVerifiableSetClient) CloseAndRecv() (*schema.VerifiableTx, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(schema.VerifiableTx)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *lcServiceClient) StreamScan(ctx context.Context, in *schema.ScanRequest, opts ...grpc.CallOption) (LcService_StreamScanClient, error) {
	stream, err := c.cc.NewStream(ctx, &LcService_ServiceDesc.Streams[5], "/lc.schema.LcService/streamScan", opts...)
	if err != nil {
		return nil, err
	}
	x := &lcServiceStreamScanClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type LcService_StreamScanClient interface {
	Recv() (*schema.Chunk, error)
	grpc.ClientStream
}

type lcServiceStreamScanClient struct {
	grpc.ClientStream
}

func (x *lcServiceStreamScanClient) Recv() (*schema.Chunk, error) {
	m := new(schema.Chunk)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *lcServiceClient) StreamZScan(ctx context.Context, in *schema.ZScanRequest, opts ...grpc.CallOption) (LcService_StreamZScanClient, error) {
	stream, err := c.cc.NewStream(ctx, &LcService_ServiceDesc.Streams[6], "/lc.schema.LcService/streamZScan", opts...)
	if err != nil {
		return nil, err
	}
	x := &lcServiceStreamZScanClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type LcService_StreamZScanClient interface {
	Recv() (*schema.Chunk, error)
	grpc.ClientStream
}

type lcServiceStreamZScanClient struct {
	grpc.ClientStream
}

func (x *lcServiceStreamZScanClient) Recv() (*schema.Chunk, error) {
	m := new(schema.Chunk)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *lcServiceClient) StreamHistory(ctx context.Context, in *schema.HistoryRequest, opts ...grpc.CallOption) (LcService_StreamHistoryClient, error) {
	stream, err := c.cc.NewStream(ctx, &LcService_ServiceDesc.Streams[7], "/lc.schema.LcService/streamHistory", opts...)
	if err != nil {
		return nil, err
	}
	x := &lcServiceStreamHistoryClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type LcService_StreamHistoryClient interface {
	Recv() (*schema.Chunk, error)
	grpc.ClientStream
}

type lcServiceStreamHistoryClient struct {
	grpc.ClientStream
}

func (x *lcServiceStreamHistoryClient) Recv() (*schema.Chunk, error) {
	m := new(schema.Chunk)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *lcServiceClient) StreamExecAll(ctx context.Context, opts ...grpc.CallOption) (LcService_StreamExecAllClient, error) {
	stream, err := c.cc.NewStream(ctx, &LcService_ServiceDesc.Streams[8], "/lc.schema.LcService/streamExecAll", opts...)
	if err != nil {
		return nil, err
	}
	x := &lcServiceStreamExecAllClient{stream}
	return x, nil
}

type LcService_StreamExecAllClient interface {
	Send(*schema.Chunk) error
	CloseAndRecv() (*schema.TxHeader, error)
	grpc.ClientStream
}

type lcServiceStreamExecAllClient struct {
	grpc.ClientStream
}

func (x *lcServiceStreamExecAllClient) Send(m *schema.Chunk) error {
	return x.ClientStream.SendMsg(m)
}

func (x *lcServiceStreamExecAllClient) CloseAndRecv() (*schema.TxHeader, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(schema.TxHeader)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// LcServiceServer is the server API for LcService service.
// All implementations must embed UnimplementedLcServiceServer
// for forward compatibility
type LcServiceServer interface {
	// immudb primitives
	// setters and getters
	Set(context.Context, *schema.SetRequest) (*schema.TxHeader, error)
	SetMulti(context.Context, *SetMultiRequest) (*SetMultiResponse, error)
	VCNSetArtifacts(context.Context, *VCNArtifactsRequest) (*VCNArtifactsResponse, error)
	VCNSearchArtifacts(context.Context, *VCNSearchRequest) (*EntryList, error)
	VCNGetArtifacts(context.Context, *VCNArtifactsGetRequest) (*EntryList, error)
	VCNUriGet(context.Context, *VCNUriGetRequest) (*VCNUriGetResponse, error)
	VCNUriSet(context.Context, *VCNUriSetRequest) (*VCNUriSetResponse, error)
	VCNUriUpdate(context.Context, *VCNUriUpdateRequest) (*VCNUriUpdateResponse, error)
	Get(context.Context, *schema.KeyRequest) (*schema.Entry, error)
	VerifiableSet(context.Context, *schema.VerifiableSetRequest) (*schema.VerifiableTx, error)
	VerifiableGet(context.Context, *schema.VerifiableGetRequest) (*schema.VerifiableEntry, error)
	// batch
	GetAll(context.Context, *schema.KeyListRequest) (*schema.Entries, error)
	ExecAll(context.Context, *schema.ExecAllRequest) (*schema.TxHeader, error)
	// scanners
	Scan(context.Context, *schema.ScanRequest) (*schema.Entries, error)
	History(context.Context, *schema.HistoryRequest) (*schema.Entries, error)
	ZAdd(context.Context, *schema.ZAddRequest) (*schema.TxHeader, error)
	VerifiableZAdd(context.Context, *schema.VerifiableZAddRequest) (*schema.VerifiableTx, error)
	ZScan(context.Context, *schema.ZScanRequest) (*schema.ZEntries, error)
	// mixed
	CurrentState(context.Context, *emptypb.Empty) (*schema.ImmutableState, error)
	Health(context.Context, *emptypb.Empty) (*schema.HealthResponse, error)
	// ledger compliance extensions
	ReportTamper(context.Context, *ReportOptions) (*emptypb.Empty, error)
	SendData(LcService_SendDataServer) error
	// ledger compliance extensions - items extended with additional properties managed by LC backend (date)
	VerifiableGetExt(context.Context, *schema.VerifiableGetRequest) (*VerifiableItemExt, error)
	VerifiableGetExtMulti(context.Context, *VerifiableGetExtMultiRequest) (*VerifiableGetExtMultiResponse, error)
	ZScanExt(context.Context, *schema.ZScanRequest) (*ZItemExtList, error)
	HistoryExt(context.Context, *schema.HistoryRequest) (*ItemExtList, error)
	Feats(context.Context, *emptypb.Empty) (*Features, error)
	// streams
	StreamGet(*schema.KeyRequest, LcService_StreamGetServer) error
	StreamSet(LcService_StreamSetServer) error
	StreamVerifiableGet(*schema.VerifiableGetRequest, LcService_StreamVerifiableGetServer) error
	StreamVerifiableSet(LcService_StreamVerifiableSetServer) error
	StreamScan(*schema.ScanRequest, LcService_StreamScanServer) error
	StreamZScan(*schema.ZScanRequest, LcService_StreamZScanServer) error
	StreamHistory(*schema.HistoryRequest, LcService_StreamHistoryServer) error
	StreamExecAll(LcService_StreamExecAllServer) error
	mustEmbedUnimplementedLcServiceServer()
}

// UnimplementedLcServiceServer must be embedded to have forward compatible implementations.
type UnimplementedLcServiceServer struct {
}

func (UnimplementedLcServiceServer) Set(context.Context, *schema.SetRequest) (*schema.TxHeader, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Set not implemented")
}
func (UnimplementedLcServiceServer) SetMulti(context.Context, *SetMultiRequest) (*SetMultiResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetMulti not implemented")
}
func (UnimplementedLcServiceServer) VCNSetArtifacts(context.Context, *VCNArtifactsRequest) (*VCNArtifactsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method VCNSetArtifacts not implemented")
}
func (UnimplementedLcServiceServer) VCNSearchArtifacts(context.Context, *VCNSearchRequest) (*EntryList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method VCNSearchArtifacts not implemented")
}
func (UnimplementedLcServiceServer) VCNGetArtifacts(context.Context, *VCNArtifactsGetRequest) (*EntryList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method VCNGetArtifacts not implemented")
}
func (UnimplementedLcServiceServer) VCNUriGet(context.Context, *VCNUriGetRequest) (*VCNUriGetResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method VCNUriGet not implemented")
}
func (UnimplementedLcServiceServer) VCNUriSet(context.Context, *VCNUriSetRequest) (*VCNUriSetResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method VCNUriSet not implemented")
}
func (UnimplementedLcServiceServer) VCNUriUpdate(context.Context, *VCNUriUpdateRequest) (*VCNUriUpdateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method VCNUriUpdate not implemented")
}
func (UnimplementedLcServiceServer) Get(context.Context, *schema.KeyRequest) (*schema.Entry, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Get not implemented")
}
func (UnimplementedLcServiceServer) VerifiableSet(context.Context, *schema.VerifiableSetRequest) (*schema.VerifiableTx, error) {
	return nil, status.Errorf(codes.Unimplemented, "method VerifiableSet not implemented")
}
func (UnimplementedLcServiceServer) VerifiableGet(context.Context, *schema.VerifiableGetRequest) (*schema.VerifiableEntry, error) {
	return nil, status.Errorf(codes.Unimplemented, "method VerifiableGet not implemented")
}
func (UnimplementedLcServiceServer) GetAll(context.Context, *schema.KeyListRequest) (*schema.Entries, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAll not implemented")
}
func (UnimplementedLcServiceServer) ExecAll(context.Context, *schema.ExecAllRequest) (*schema.TxHeader, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ExecAll not implemented")
}
func (UnimplementedLcServiceServer) Scan(context.Context, *schema.ScanRequest) (*schema.Entries, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Scan not implemented")
}
func (UnimplementedLcServiceServer) History(context.Context, *schema.HistoryRequest) (*schema.Entries, error) {
	return nil, status.Errorf(codes.Unimplemented, "method History not implemented")
}
func (UnimplementedLcServiceServer) ZAdd(context.Context, *schema.ZAddRequest) (*schema.TxHeader, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ZAdd not implemented")
}
func (UnimplementedLcServiceServer) VerifiableZAdd(context.Context, *schema.VerifiableZAddRequest) (*schema.VerifiableTx, error) {
	return nil, status.Errorf(codes.Unimplemented, "method VerifiableZAdd not implemented")
}
func (UnimplementedLcServiceServer) ZScan(context.Context, *schema.ZScanRequest) (*schema.ZEntries, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ZScan not implemented")
}
func (UnimplementedLcServiceServer) CurrentState(context.Context, *emptypb.Empty) (*schema.ImmutableState, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CurrentState not implemented")
}
func (UnimplementedLcServiceServer) Health(context.Context, *emptypb.Empty) (*schema.HealthResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Health not implemented")
}
func (UnimplementedLcServiceServer) ReportTamper(context.Context, *ReportOptions) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReportTamper not implemented")
}
func (UnimplementedLcServiceServer) SendData(LcService_SendDataServer) error {
	return status.Errorf(codes.Unimplemented, "method SendData not implemented")
}
func (UnimplementedLcServiceServer) VerifiableGetExt(context.Context, *schema.VerifiableGetRequest) (*VerifiableItemExt, error) {
	return nil, status.Errorf(codes.Unimplemented, "method VerifiableGetExt not implemented")
}
func (UnimplementedLcServiceServer) VerifiableGetExtMulti(context.Context, *VerifiableGetExtMultiRequest) (*VerifiableGetExtMultiResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method VerifiableGetExtMulti not implemented")
}
func (UnimplementedLcServiceServer) ZScanExt(context.Context, *schema.ZScanRequest) (*ZItemExtList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ZScanExt not implemented")
}
func (UnimplementedLcServiceServer) HistoryExt(context.Context, *schema.HistoryRequest) (*ItemExtList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method HistoryExt not implemented")
}
func (UnimplementedLcServiceServer) Feats(context.Context, *emptypb.Empty) (*Features, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Feats not implemented")
}
func (UnimplementedLcServiceServer) StreamGet(*schema.KeyRequest, LcService_StreamGetServer) error {
	return status.Errorf(codes.Unimplemented, "method StreamGet not implemented")
}
func (UnimplementedLcServiceServer) StreamSet(LcService_StreamSetServer) error {
	return status.Errorf(codes.Unimplemented, "method StreamSet not implemented")
}
func (UnimplementedLcServiceServer) StreamVerifiableGet(*schema.VerifiableGetRequest, LcService_StreamVerifiableGetServer) error {
	return status.Errorf(codes.Unimplemented, "method StreamVerifiableGet not implemented")
}
func (UnimplementedLcServiceServer) StreamVerifiableSet(LcService_StreamVerifiableSetServer) error {
	return status.Errorf(codes.Unimplemented, "method StreamVerifiableSet not implemented")
}
func (UnimplementedLcServiceServer) StreamScan(*schema.ScanRequest, LcService_StreamScanServer) error {
	return status.Errorf(codes.Unimplemented, "method StreamScan not implemented")
}
func (UnimplementedLcServiceServer) StreamZScan(*schema.ZScanRequest, LcService_StreamZScanServer) error {
	return status.Errorf(codes.Unimplemented, "method StreamZScan not implemented")
}
func (UnimplementedLcServiceServer) StreamHistory(*schema.HistoryRequest, LcService_StreamHistoryServer) error {
	return status.Errorf(codes.Unimplemented, "method StreamHistory not implemented")
}
func (UnimplementedLcServiceServer) StreamExecAll(LcService_StreamExecAllServer) error {
	return status.Errorf(codes.Unimplemented, "method StreamExecAll not implemented")
}
func (UnimplementedLcServiceServer) mustEmbedUnimplementedLcServiceServer() {}

// UnsafeLcServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to LcServiceServer will
// result in compilation errors.
type UnsafeLcServiceServer interface {
	mustEmbedUnimplementedLcServiceServer()
}

func RegisterLcServiceServer(s grpc.ServiceRegistrar, srv LcServiceServer) {
	s.RegisterService(&LcService_ServiceDesc, srv)
}

func _LcService_Set_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(schema.SetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LcServiceServer).Set(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/lc.schema.LcService/Set",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LcServiceServer).Set(ctx, req.(*schema.SetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LcService_SetMulti_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetMultiRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LcServiceServer).SetMulti(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/lc.schema.LcService/SetMulti",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LcServiceServer).SetMulti(ctx, req.(*SetMultiRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LcService_VCNSetArtifacts_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VCNArtifactsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LcServiceServer).VCNSetArtifacts(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/lc.schema.LcService/VCNSetArtifacts",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LcServiceServer).VCNSetArtifacts(ctx, req.(*VCNArtifactsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LcService_VCNSearchArtifacts_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VCNSearchRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LcServiceServer).VCNSearchArtifacts(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/lc.schema.LcService/VCNSearchArtifacts",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LcServiceServer).VCNSearchArtifacts(ctx, req.(*VCNSearchRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LcService_VCNGetArtifacts_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VCNArtifactsGetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LcServiceServer).VCNGetArtifacts(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/lc.schema.LcService/VCNGetArtifacts",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LcServiceServer).VCNGetArtifacts(ctx, req.(*VCNArtifactsGetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LcService_VCNUriGet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VCNUriGetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LcServiceServer).VCNUriGet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/lc.schema.LcService/VCNUriGet",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LcServiceServer).VCNUriGet(ctx, req.(*VCNUriGetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LcService_VCNUriSet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VCNUriSetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LcServiceServer).VCNUriSet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/lc.schema.LcService/VCNUriSet",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LcServiceServer).VCNUriSet(ctx, req.(*VCNUriSetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LcService_VCNUriUpdate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VCNUriUpdateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LcServiceServer).VCNUriUpdate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/lc.schema.LcService/VCNUriUpdate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LcServiceServer).VCNUriUpdate(ctx, req.(*VCNUriUpdateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LcService_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(schema.KeyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LcServiceServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/lc.schema.LcService/Get",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LcServiceServer).Get(ctx, req.(*schema.KeyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LcService_VerifiableSet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(schema.VerifiableSetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LcServiceServer).VerifiableSet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/lc.schema.LcService/VerifiableSet",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LcServiceServer).VerifiableSet(ctx, req.(*schema.VerifiableSetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LcService_VerifiableGet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(schema.VerifiableGetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LcServiceServer).VerifiableGet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/lc.schema.LcService/VerifiableGet",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LcServiceServer).VerifiableGet(ctx, req.(*schema.VerifiableGetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LcService_GetAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(schema.KeyListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LcServiceServer).GetAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/lc.schema.LcService/GetAll",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LcServiceServer).GetAll(ctx, req.(*schema.KeyListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LcService_ExecAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(schema.ExecAllRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LcServiceServer).ExecAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/lc.schema.LcService/ExecAll",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LcServiceServer).ExecAll(ctx, req.(*schema.ExecAllRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LcService_Scan_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(schema.ScanRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LcServiceServer).Scan(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/lc.schema.LcService/Scan",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LcServiceServer).Scan(ctx, req.(*schema.ScanRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LcService_History_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(schema.HistoryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LcServiceServer).History(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/lc.schema.LcService/History",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LcServiceServer).History(ctx, req.(*schema.HistoryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LcService_ZAdd_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(schema.ZAddRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LcServiceServer).ZAdd(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/lc.schema.LcService/ZAdd",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LcServiceServer).ZAdd(ctx, req.(*schema.ZAddRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LcService_VerifiableZAdd_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(schema.VerifiableZAddRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LcServiceServer).VerifiableZAdd(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/lc.schema.LcService/VerifiableZAdd",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LcServiceServer).VerifiableZAdd(ctx, req.(*schema.VerifiableZAddRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LcService_ZScan_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(schema.ZScanRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LcServiceServer).ZScan(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/lc.schema.LcService/ZScan",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LcServiceServer).ZScan(ctx, req.(*schema.ZScanRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LcService_CurrentState_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LcServiceServer).CurrentState(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/lc.schema.LcService/CurrentState",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LcServiceServer).CurrentState(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _LcService_Health_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LcServiceServer).Health(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/lc.schema.LcService/Health",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LcServiceServer).Health(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _LcService_ReportTamper_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReportOptions)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LcServiceServer).ReportTamper(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/lc.schema.LcService/ReportTamper",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LcServiceServer).ReportTamper(ctx, req.(*ReportOptions))
	}
	return interceptor(ctx, in, info, handler)
}

func _LcService_SendData_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(LcServiceServer).SendData(&lcServiceSendDataServer{stream})
}

type LcService_SendDataServer interface {
	Send(*Response) error
	Recv() (*Data, error)
	grpc.ServerStream
}

type lcServiceSendDataServer struct {
	grpc.ServerStream
}

func (x *lcServiceSendDataServer) Send(m *Response) error {
	return x.ServerStream.SendMsg(m)
}

func (x *lcServiceSendDataServer) Recv() (*Data, error) {
	m := new(Data)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _LcService_VerifiableGetExt_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(schema.VerifiableGetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LcServiceServer).VerifiableGetExt(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/lc.schema.LcService/VerifiableGetExt",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LcServiceServer).VerifiableGetExt(ctx, req.(*schema.VerifiableGetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LcService_VerifiableGetExtMulti_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VerifiableGetExtMultiRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LcServiceServer).VerifiableGetExtMulti(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/lc.schema.LcService/VerifiableGetExtMulti",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LcServiceServer).VerifiableGetExtMulti(ctx, req.(*VerifiableGetExtMultiRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LcService_ZScanExt_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(schema.ZScanRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LcServiceServer).ZScanExt(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/lc.schema.LcService/ZScanExt",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LcServiceServer).ZScanExt(ctx, req.(*schema.ZScanRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LcService_HistoryExt_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(schema.HistoryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LcServiceServer).HistoryExt(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/lc.schema.LcService/HistoryExt",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LcServiceServer).HistoryExt(ctx, req.(*schema.HistoryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LcService_Feats_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LcServiceServer).Feats(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/lc.schema.LcService/Feats",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LcServiceServer).Feats(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _LcService_StreamGet_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(schema.KeyRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(LcServiceServer).StreamGet(m, &lcServiceStreamGetServer{stream})
}

type LcService_StreamGetServer interface {
	Send(*schema.Chunk) error
	grpc.ServerStream
}

type lcServiceStreamGetServer struct {
	grpc.ServerStream
}

func (x *lcServiceStreamGetServer) Send(m *schema.Chunk) error {
	return x.ServerStream.SendMsg(m)
}

func _LcService_StreamSet_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(LcServiceServer).StreamSet(&lcServiceStreamSetServer{stream})
}

type LcService_StreamSetServer interface {
	SendAndClose(*schema.TxHeader) error
	Recv() (*schema.Chunk, error)
	grpc.ServerStream
}

type lcServiceStreamSetServer struct {
	grpc.ServerStream
}

func (x *lcServiceStreamSetServer) SendAndClose(m *schema.TxHeader) error {
	return x.ServerStream.SendMsg(m)
}

func (x *lcServiceStreamSetServer) Recv() (*schema.Chunk, error) {
	m := new(schema.Chunk)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _LcService_StreamVerifiableGet_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(schema.VerifiableGetRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(LcServiceServer).StreamVerifiableGet(m, &lcServiceStreamVerifiableGetServer{stream})
}

type LcService_StreamVerifiableGetServer interface {
	Send(*schema.Chunk) error
	grpc.ServerStream
}

type lcServiceStreamVerifiableGetServer struct {
	grpc.ServerStream
}

func (x *lcServiceStreamVerifiableGetServer) Send(m *schema.Chunk) error {
	return x.ServerStream.SendMsg(m)
}

func _LcService_StreamVerifiableSet_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(LcServiceServer).StreamVerifiableSet(&lcServiceStreamVerifiableSetServer{stream})
}

type LcService_StreamVerifiableSetServer interface {
	SendAndClose(*schema.VerifiableTx) error
	Recv() (*schema.Chunk, error)
	grpc.ServerStream
}

type lcServiceStreamVerifiableSetServer struct {
	grpc.ServerStream
}

func (x *lcServiceStreamVerifiableSetServer) SendAndClose(m *schema.VerifiableTx) error {
	return x.ServerStream.SendMsg(m)
}

func (x *lcServiceStreamVerifiableSetServer) Recv() (*schema.Chunk, error) {
	m := new(schema.Chunk)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _LcService_StreamScan_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(schema.ScanRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(LcServiceServer).StreamScan(m, &lcServiceStreamScanServer{stream})
}

type LcService_StreamScanServer interface {
	Send(*schema.Chunk) error
	grpc.ServerStream
}

type lcServiceStreamScanServer struct {
	grpc.ServerStream
}

func (x *lcServiceStreamScanServer) Send(m *schema.Chunk) error {
	return x.ServerStream.SendMsg(m)
}

func _LcService_StreamZScan_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(schema.ZScanRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(LcServiceServer).StreamZScan(m, &lcServiceStreamZScanServer{stream})
}

type LcService_StreamZScanServer interface {
	Send(*schema.Chunk) error
	grpc.ServerStream
}

type lcServiceStreamZScanServer struct {
	grpc.ServerStream
}

func (x *lcServiceStreamZScanServer) Send(m *schema.Chunk) error {
	return x.ServerStream.SendMsg(m)
}

func _LcService_StreamHistory_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(schema.HistoryRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(LcServiceServer).StreamHistory(m, &lcServiceStreamHistoryServer{stream})
}

type LcService_StreamHistoryServer interface {
	Send(*schema.Chunk) error
	grpc.ServerStream
}

type lcServiceStreamHistoryServer struct {
	grpc.ServerStream
}

func (x *lcServiceStreamHistoryServer) Send(m *schema.Chunk) error {
	return x.ServerStream.SendMsg(m)
}

func _LcService_StreamExecAll_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(LcServiceServer).StreamExecAll(&lcServiceStreamExecAllServer{stream})
}

type LcService_StreamExecAllServer interface {
	SendAndClose(*schema.TxHeader) error
	Recv() (*schema.Chunk, error)
	grpc.ServerStream
}

type lcServiceStreamExecAllServer struct {
	grpc.ServerStream
}

func (x *lcServiceStreamExecAllServer) SendAndClose(m *schema.TxHeader) error {
	return x.ServerStream.SendMsg(m)
}

func (x *lcServiceStreamExecAllServer) Recv() (*schema.Chunk, error) {
	m := new(schema.Chunk)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// LcService_ServiceDesc is the grpc.ServiceDesc for LcService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var LcService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "lc.schema.LcService",
	HandlerType: (*LcServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Set",
			Handler:    _LcService_Set_Handler,
		},
		{
			MethodName: "SetMulti",
			Handler:    _LcService_SetMulti_Handler,
		},
		{
			MethodName: "VCNSetArtifacts",
			Handler:    _LcService_VCNSetArtifacts_Handler,
		},
		{
			MethodName: "VCNSearchArtifacts",
			Handler:    _LcService_VCNSearchArtifacts_Handler,
		},
		{
			MethodName: "VCNGetArtifacts",
			Handler:    _LcService_VCNGetArtifacts_Handler,
		},
		{
			MethodName: "VCNUriGet",
			Handler:    _LcService_VCNUriGet_Handler,
		},
		{
			MethodName: "VCNUriSet",
			Handler:    _LcService_VCNUriSet_Handler,
		},
		{
			MethodName: "VCNUriUpdate",
			Handler:    _LcService_VCNUriUpdate_Handler,
		},
		{
			MethodName: "Get",
			Handler:    _LcService_Get_Handler,
		},
		{
			MethodName: "VerifiableSet",
			Handler:    _LcService_VerifiableSet_Handler,
		},
		{
			MethodName: "VerifiableGet",
			Handler:    _LcService_VerifiableGet_Handler,
		},
		{
			MethodName: "GetAll",
			Handler:    _LcService_GetAll_Handler,
		},
		{
			MethodName: "ExecAll",
			Handler:    _LcService_ExecAll_Handler,
		},
		{
			MethodName: "Scan",
			Handler:    _LcService_Scan_Handler,
		},
		{
			MethodName: "History",
			Handler:    _LcService_History_Handler,
		},
		{
			MethodName: "ZAdd",
			Handler:    _LcService_ZAdd_Handler,
		},
		{
			MethodName: "VerifiableZAdd",
			Handler:    _LcService_VerifiableZAdd_Handler,
		},
		{
			MethodName: "ZScan",
			Handler:    _LcService_ZScan_Handler,
		},
		{
			MethodName: "CurrentState",
			Handler:    _LcService_CurrentState_Handler,
		},
		{
			MethodName: "Health",
			Handler:    _LcService_Health_Handler,
		},
		{
			MethodName: "ReportTamper",
			Handler:    _LcService_ReportTamper_Handler,
		},
		{
			MethodName: "VerifiableGetExt",
			Handler:    _LcService_VerifiableGetExt_Handler,
		},
		{
			MethodName: "VerifiableGetExtMulti",
			Handler:    _LcService_VerifiableGetExtMulti_Handler,
		},
		{
			MethodName: "ZScanExt",
			Handler:    _LcService_ZScanExt_Handler,
		},
		{
			MethodName: "HistoryExt",
			Handler:    _LcService_HistoryExt_Handler,
		},
		{
			MethodName: "Feats",
			Handler:    _LcService_Feats_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "SendData",
			Handler:       _LcService_SendData_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
		{
			StreamName:    "streamGet",
			Handler:       _LcService_StreamGet_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "streamSet",
			Handler:       _LcService_StreamSet_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "streamVerifiableGet",
			Handler:       _LcService_StreamVerifiableGet_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "streamVerifiableSet",
			Handler:       _LcService_StreamVerifiableSet_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "streamScan",
			Handler:       _LcService_StreamScan_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "streamZScan",
			Handler:       _LcService_StreamZScan_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "streamHistory",
			Handler:       _LcService_StreamHistory_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "streamExecAll",
			Handler:       _LcService_StreamExecAll_Handler,
			ClientStreams: true,
		},
	},
	Metadata: "lc.proto",
}
