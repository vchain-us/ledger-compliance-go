// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package schema

import (
	context "context"
	schema "github.com/codenotary/immudb/pkg/api/schema"
	empty "github.com/golang/protobuf/ptypes/empty"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// LcServiceClient is the client API for LcService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type LcServiceClient interface {
	// immudb primitives
	// setters and getters
	Set(ctx context.Context, in *schema.SetRequest, opts ...grpc.CallOption) (*schema.TxMetadata, error)
	Get(ctx context.Context, in *schema.KeyRequest, opts ...grpc.CallOption) (*schema.Entry, error)
	VerifiableSet(ctx context.Context, in *schema.VerifiableSetRequest, opts ...grpc.CallOption) (*schema.VerifiableTx, error)
	VerifiableGet(ctx context.Context, in *schema.VerifiableGetRequest, opts ...grpc.CallOption) (*schema.VerifiableEntry, error)
	// batch
	GetAll(ctx context.Context, in *schema.KeyListRequest, opts ...grpc.CallOption) (*schema.Entries, error)
	ExecAll(ctx context.Context, in *schema.ExecAllRequest, opts ...grpc.CallOption) (*schema.TxMetadata, error)
	// scanners
	Scan(ctx context.Context, in *schema.ScanRequest, opts ...grpc.CallOption) (*schema.Entries, error)
	History(ctx context.Context, in *schema.HistoryRequest, opts ...grpc.CallOption) (*schema.Entries, error)
	ZAdd(ctx context.Context, in *schema.ZAddRequest, opts ...grpc.CallOption) (*schema.TxMetadata, error)
	VerifiableZAdd(ctx context.Context, in *schema.VerifiableZAddRequest, opts ...grpc.CallOption) (*schema.VerifiableTx, error)
	ZScan(ctx context.Context, in *schema.ZScanRequest, opts ...grpc.CallOption) (*schema.ZEntries, error)
	// mixed
	CurrentState(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*schema.ImmutableState, error)
	Health(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*schema.HealthResponse, error)
	// ledger compliance extensions
	ReportTamper(ctx context.Context, in *ReportOptions, opts ...grpc.CallOption) (*empty.Empty, error)
	SendData(ctx context.Context, opts ...grpc.CallOption) (LcService_SendDataClient, error)
	// ledger compliance extensions - items extended with additional properties managed by LC backend (date)
	VerifiableGetExt(ctx context.Context, in *schema.VerifiableGetRequest, opts ...grpc.CallOption) (*VerifiableItemExt, error)
	ZScanExt(ctx context.Context, in *schema.ZScanRequest, opts ...grpc.CallOption) (*ZItemExtList, error)
	HistoryExt(ctx context.Context, in *schema.HistoryRequest, opts ...grpc.CallOption) (*ItemExtList, error)
}

type lcServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewLcServiceClient(cc grpc.ClientConnInterface) LcServiceClient {
	return &lcServiceClient{cc}
}

func (c *lcServiceClient) Set(ctx context.Context, in *schema.SetRequest, opts ...grpc.CallOption) (*schema.TxMetadata, error) {
	out := new(schema.TxMetadata)
	err := c.cc.Invoke(ctx, "/lc.schema.LcService/Set", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lcServiceClient) Get(ctx context.Context, in *schema.KeyRequest, opts ...grpc.CallOption) (*schema.Entry, error) {
	out := new(schema.Entry)
	err := c.cc.Invoke(ctx, "/lc.schema.LcService/Get", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lcServiceClient) VerifiableSet(ctx context.Context, in *schema.VerifiableSetRequest, opts ...grpc.CallOption) (*schema.VerifiableTx, error) {
	out := new(schema.VerifiableTx)
	err := c.cc.Invoke(ctx, "/lc.schema.LcService/VerifiableSet", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lcServiceClient) VerifiableGet(ctx context.Context, in *schema.VerifiableGetRequest, opts ...grpc.CallOption) (*schema.VerifiableEntry, error) {
	out := new(schema.VerifiableEntry)
	err := c.cc.Invoke(ctx, "/lc.schema.LcService/VerifiableGet", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lcServiceClient) GetAll(ctx context.Context, in *schema.KeyListRequest, opts ...grpc.CallOption) (*schema.Entries, error) {
	out := new(schema.Entries)
	err := c.cc.Invoke(ctx, "/lc.schema.LcService/GetAll", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lcServiceClient) ExecAll(ctx context.Context, in *schema.ExecAllRequest, opts ...grpc.CallOption) (*schema.TxMetadata, error) {
	out := new(schema.TxMetadata)
	err := c.cc.Invoke(ctx, "/lc.schema.LcService/ExecAll", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lcServiceClient) Scan(ctx context.Context, in *schema.ScanRequest, opts ...grpc.CallOption) (*schema.Entries, error) {
	out := new(schema.Entries)
	err := c.cc.Invoke(ctx, "/lc.schema.LcService/Scan", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lcServiceClient) History(ctx context.Context, in *schema.HistoryRequest, opts ...grpc.CallOption) (*schema.Entries, error) {
	out := new(schema.Entries)
	err := c.cc.Invoke(ctx, "/lc.schema.LcService/History", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lcServiceClient) ZAdd(ctx context.Context, in *schema.ZAddRequest, opts ...grpc.CallOption) (*schema.TxMetadata, error) {
	out := new(schema.TxMetadata)
	err := c.cc.Invoke(ctx, "/lc.schema.LcService/ZAdd", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lcServiceClient) VerifiableZAdd(ctx context.Context, in *schema.VerifiableZAddRequest, opts ...grpc.CallOption) (*schema.VerifiableTx, error) {
	out := new(schema.VerifiableTx)
	err := c.cc.Invoke(ctx, "/lc.schema.LcService/VerifiableZAdd", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lcServiceClient) ZScan(ctx context.Context, in *schema.ZScanRequest, opts ...grpc.CallOption) (*schema.ZEntries, error) {
	out := new(schema.ZEntries)
	err := c.cc.Invoke(ctx, "/lc.schema.LcService/ZScan", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lcServiceClient) CurrentState(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*schema.ImmutableState, error) {
	out := new(schema.ImmutableState)
	err := c.cc.Invoke(ctx, "/lc.schema.LcService/CurrentState", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lcServiceClient) Health(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*schema.HealthResponse, error) {
	out := new(schema.HealthResponse)
	err := c.cc.Invoke(ctx, "/lc.schema.LcService/Health", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lcServiceClient) ReportTamper(ctx context.Context, in *ReportOptions, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/lc.schema.LcService/ReportTamper", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lcServiceClient) SendData(ctx context.Context, opts ...grpc.CallOption) (LcService_SendDataClient, error) {
	stream, err := c.cc.NewStream(ctx, &_LcService_serviceDesc.Streams[0], "/lc.schema.LcService/SendData", opts...)
	if err != nil {
		return nil, err
	}
	x := &lcServiceSendDataClient{stream}
	return x, nil
}

type LcService_SendDataClient interface {
	Send(*Data) error
	Recv() (*Response, error)
	grpc.ClientStream
}

type lcServiceSendDataClient struct {
	grpc.ClientStream
}

func (x *lcServiceSendDataClient) Send(m *Data) error {
	return x.ClientStream.SendMsg(m)
}

func (x *lcServiceSendDataClient) Recv() (*Response, error) {
	m := new(Response)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *lcServiceClient) VerifiableGetExt(ctx context.Context, in *schema.VerifiableGetRequest, opts ...grpc.CallOption) (*VerifiableItemExt, error) {
	out := new(VerifiableItemExt)
	err := c.cc.Invoke(ctx, "/lc.schema.LcService/VerifiableGetExt", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lcServiceClient) ZScanExt(ctx context.Context, in *schema.ZScanRequest, opts ...grpc.CallOption) (*ZItemExtList, error) {
	out := new(ZItemExtList)
	err := c.cc.Invoke(ctx, "/lc.schema.LcService/ZScanExt", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lcServiceClient) HistoryExt(ctx context.Context, in *schema.HistoryRequest, opts ...grpc.CallOption) (*ItemExtList, error) {
	out := new(ItemExtList)
	err := c.cc.Invoke(ctx, "/lc.schema.LcService/HistoryExt", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// LcServiceServer is the server API for LcService service.
// All implementations must embed UnimplementedLcServiceServer
// for forward compatibility
type LcServiceServer interface {
	// immudb primitives
	// setters and getters
	Set(context.Context, *schema.SetRequest) (*schema.TxMetadata, error)
	Get(context.Context, *schema.KeyRequest) (*schema.Entry, error)
	VerifiableSet(context.Context, *schema.VerifiableSetRequest) (*schema.VerifiableTx, error)
	VerifiableGet(context.Context, *schema.VerifiableGetRequest) (*schema.VerifiableEntry, error)
	// batch
	GetAll(context.Context, *schema.KeyListRequest) (*schema.Entries, error)
	ExecAll(context.Context, *schema.ExecAllRequest) (*schema.TxMetadata, error)
	// scanners
	Scan(context.Context, *schema.ScanRequest) (*schema.Entries, error)
	History(context.Context, *schema.HistoryRequest) (*schema.Entries, error)
	ZAdd(context.Context, *schema.ZAddRequest) (*schema.TxMetadata, error)
	VerifiableZAdd(context.Context, *schema.VerifiableZAddRequest) (*schema.VerifiableTx, error)
	ZScan(context.Context, *schema.ZScanRequest) (*schema.ZEntries, error)
	// mixed
	CurrentState(context.Context, *empty.Empty) (*schema.ImmutableState, error)
	Health(context.Context, *empty.Empty) (*schema.HealthResponse, error)
	// ledger compliance extensions
	ReportTamper(context.Context, *ReportOptions) (*empty.Empty, error)
	SendData(LcService_SendDataServer) error
	// ledger compliance extensions - items extended with additional properties managed by LC backend (date)
	VerifiableGetExt(context.Context, *schema.VerifiableGetRequest) (*VerifiableItemExt, error)
	ZScanExt(context.Context, *schema.ZScanRequest) (*ZItemExtList, error)
	HistoryExt(context.Context, *schema.HistoryRequest) (*ItemExtList, error)
	mustEmbedUnimplementedLcServiceServer()
}

// UnimplementedLcServiceServer must be embedded to have forward compatible implementations.
type UnimplementedLcServiceServer struct {
}

func (*UnimplementedLcServiceServer) Set(context.Context, *schema.SetRequest) (*schema.TxMetadata, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Set not implemented")
}
func (*UnimplementedLcServiceServer) Get(context.Context, *schema.KeyRequest) (*schema.Entry, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Get not implemented")
}
func (*UnimplementedLcServiceServer) VerifiableSet(context.Context, *schema.VerifiableSetRequest) (*schema.VerifiableTx, error) {
	return nil, status.Errorf(codes.Unimplemented, "method VerifiableSet not implemented")
}
func (*UnimplementedLcServiceServer) VerifiableGet(context.Context, *schema.VerifiableGetRequest) (*schema.VerifiableEntry, error) {
	return nil, status.Errorf(codes.Unimplemented, "method VerifiableGet not implemented")
}
func (*UnimplementedLcServiceServer) GetAll(context.Context, *schema.KeyListRequest) (*schema.Entries, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAll not implemented")
}
func (*UnimplementedLcServiceServer) ExecAll(context.Context, *schema.ExecAllRequest) (*schema.TxMetadata, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ExecAll not implemented")
}
func (*UnimplementedLcServiceServer) Scan(context.Context, *schema.ScanRequest) (*schema.Entries, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Scan not implemented")
}
func (*UnimplementedLcServiceServer) History(context.Context, *schema.HistoryRequest) (*schema.Entries, error) {
	return nil, status.Errorf(codes.Unimplemented, "method History not implemented")
}
func (*UnimplementedLcServiceServer) ZAdd(context.Context, *schema.ZAddRequest) (*schema.TxMetadata, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ZAdd not implemented")
}
func (*UnimplementedLcServiceServer) VerifiableZAdd(context.Context, *schema.VerifiableZAddRequest) (*schema.VerifiableTx, error) {
	return nil, status.Errorf(codes.Unimplemented, "method VerifiableZAdd not implemented")
}
func (*UnimplementedLcServiceServer) ZScan(context.Context, *schema.ZScanRequest) (*schema.ZEntries, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ZScan not implemented")
}
func (*UnimplementedLcServiceServer) CurrentState(context.Context, *empty.Empty) (*schema.ImmutableState, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CurrentState not implemented")
}
func (*UnimplementedLcServiceServer) Health(context.Context, *empty.Empty) (*schema.HealthResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Health not implemented")
}
func (*UnimplementedLcServiceServer) ReportTamper(context.Context, *ReportOptions) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReportTamper not implemented")
}
func (*UnimplementedLcServiceServer) SendData(LcService_SendDataServer) error {
	return status.Errorf(codes.Unimplemented, "method SendData not implemented")
}
func (*UnimplementedLcServiceServer) VerifiableGetExt(context.Context, *schema.VerifiableGetRequest) (*VerifiableItemExt, error) {
	return nil, status.Errorf(codes.Unimplemented, "method VerifiableGetExt not implemented")
}
func (*UnimplementedLcServiceServer) ZScanExt(context.Context, *schema.ZScanRequest) (*ZItemExtList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ZScanExt not implemented")
}
func (*UnimplementedLcServiceServer) HistoryExt(context.Context, *schema.HistoryRequest) (*ItemExtList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method HistoryExt not implemented")
}
func (*UnimplementedLcServiceServer) mustEmbedUnimplementedLcServiceServer() {}

func RegisterLcServiceServer(s *grpc.Server, srv LcServiceServer) {
	s.RegisterService(&_LcService_serviceDesc, srv)
}

func _LcService_Set_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(schema.SetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LcServiceServer).Set(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/lc.schema.LcService/Set",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LcServiceServer).Set(ctx, req.(*schema.SetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LcService_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(schema.KeyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LcServiceServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/lc.schema.LcService/Get",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LcServiceServer).Get(ctx, req.(*schema.KeyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LcService_VerifiableSet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(schema.VerifiableSetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LcServiceServer).VerifiableSet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/lc.schema.LcService/VerifiableSet",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LcServiceServer).VerifiableSet(ctx, req.(*schema.VerifiableSetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LcService_VerifiableGet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(schema.VerifiableGetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LcServiceServer).VerifiableGet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/lc.schema.LcService/VerifiableGet",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LcServiceServer).VerifiableGet(ctx, req.(*schema.VerifiableGetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LcService_GetAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(schema.KeyListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LcServiceServer).GetAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/lc.schema.LcService/GetAll",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LcServiceServer).GetAll(ctx, req.(*schema.KeyListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LcService_ExecAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(schema.ExecAllRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LcServiceServer).ExecAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/lc.schema.LcService/ExecAll",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LcServiceServer).ExecAll(ctx, req.(*schema.ExecAllRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LcService_Scan_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(schema.ScanRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LcServiceServer).Scan(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/lc.schema.LcService/Scan",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LcServiceServer).Scan(ctx, req.(*schema.ScanRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LcService_History_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(schema.HistoryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LcServiceServer).History(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/lc.schema.LcService/History",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LcServiceServer).History(ctx, req.(*schema.HistoryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LcService_ZAdd_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(schema.ZAddRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LcServiceServer).ZAdd(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/lc.schema.LcService/ZAdd",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LcServiceServer).ZAdd(ctx, req.(*schema.ZAddRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LcService_VerifiableZAdd_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(schema.VerifiableZAddRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LcServiceServer).VerifiableZAdd(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/lc.schema.LcService/VerifiableZAdd",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LcServiceServer).VerifiableZAdd(ctx, req.(*schema.VerifiableZAddRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LcService_ZScan_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(schema.ZScanRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LcServiceServer).ZScan(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/lc.schema.LcService/ZScan",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LcServiceServer).ZScan(ctx, req.(*schema.ZScanRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LcService_CurrentState_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(empty.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LcServiceServer).CurrentState(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/lc.schema.LcService/CurrentState",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LcServiceServer).CurrentState(ctx, req.(*empty.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _LcService_Health_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(empty.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LcServiceServer).Health(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/lc.schema.LcService/Health",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LcServiceServer).Health(ctx, req.(*empty.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _LcService_ReportTamper_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReportOptions)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LcServiceServer).ReportTamper(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/lc.schema.LcService/ReportTamper",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LcServiceServer).ReportTamper(ctx, req.(*ReportOptions))
	}
	return interceptor(ctx, in, info, handler)
}

func _LcService_SendData_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(LcServiceServer).SendData(&lcServiceSendDataServer{stream})
}

type LcService_SendDataServer interface {
	Send(*Response) error
	Recv() (*Data, error)
	grpc.ServerStream
}

type lcServiceSendDataServer struct {
	grpc.ServerStream
}

func (x *lcServiceSendDataServer) Send(m *Response) error {
	return x.ServerStream.SendMsg(m)
}

func (x *lcServiceSendDataServer) Recv() (*Data, error) {
	m := new(Data)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _LcService_VerifiableGetExt_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(schema.VerifiableGetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LcServiceServer).VerifiableGetExt(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/lc.schema.LcService/VerifiableGetExt",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LcServiceServer).VerifiableGetExt(ctx, req.(*schema.VerifiableGetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LcService_ZScanExt_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(schema.ZScanRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LcServiceServer).ZScanExt(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/lc.schema.LcService/ZScanExt",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LcServiceServer).ZScanExt(ctx, req.(*schema.ZScanRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LcService_HistoryExt_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(schema.HistoryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LcServiceServer).HistoryExt(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/lc.schema.LcService/HistoryExt",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LcServiceServer).HistoryExt(ctx, req.(*schema.HistoryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _LcService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "lc.schema.LcService",
	HandlerType: (*LcServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Set",
			Handler:    _LcService_Set_Handler,
		},
		{
			MethodName: "Get",
			Handler:    _LcService_Get_Handler,
		},
		{
			MethodName: "VerifiableSet",
			Handler:    _LcService_VerifiableSet_Handler,
		},
		{
			MethodName: "VerifiableGet",
			Handler:    _LcService_VerifiableGet_Handler,
		},
		{
			MethodName: "GetAll",
			Handler:    _LcService_GetAll_Handler,
		},
		{
			MethodName: "ExecAll",
			Handler:    _LcService_ExecAll_Handler,
		},
		{
			MethodName: "Scan",
			Handler:    _LcService_Scan_Handler,
		},
		{
			MethodName: "History",
			Handler:    _LcService_History_Handler,
		},
		{
			MethodName: "ZAdd",
			Handler:    _LcService_ZAdd_Handler,
		},
		{
			MethodName: "VerifiableZAdd",
			Handler:    _LcService_VerifiableZAdd_Handler,
		},
		{
			MethodName: "ZScan",
			Handler:    _LcService_ZScan_Handler,
		},
		{
			MethodName: "CurrentState",
			Handler:    _LcService_CurrentState_Handler,
		},
		{
			MethodName: "Health",
			Handler:    _LcService_Health_Handler,
		},
		{
			MethodName: "ReportTamper",
			Handler:    _LcService_ReportTamper_Handler,
		},
		{
			MethodName: "VerifiableGetExt",
			Handler:    _LcService_VerifiableGetExt_Handler,
		},
		{
			MethodName: "ZScanExt",
			Handler:    _LcService_ZScanExt_Handler,
		},
		{
			MethodName: "HistoryExt",
			Handler:    _LcService_HistoryExt_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "SendData",
			Handler:       _LcService_SendData_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "lc.proto",
}
