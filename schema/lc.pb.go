// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.25.0
// 	protoc        v3.11.4
// source: lc.proto

package schema

import (
	schema "github.com/codenotary/immudb/pkg/api/schema"
	proto "github.com/golang/protobuf/proto"
	empty "github.com/golang/protobuf/ptypes/empty"
	timestamp "github.com/golang/protobuf/ptypes/timestamp"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

type VCNDependency_Type int32

const (
	VCNDependency_Direct   VCNDependency_Type = 0
	VCNDependency_Indirect VCNDependency_Type = 1
	VCNDependency_Base     VCNDependency_Type = 2
)

// Enum value maps for VCNDependency_Type.
var (
	VCNDependency_Type_name = map[int32]string{
		0: "Direct",
		1: "Indirect",
		2: "Base",
	}
	VCNDependency_Type_value = map[string]int32{
		"Direct":   0,
		"Indirect": 1,
		"Base":     2,
	}
)

func (x VCNDependency_Type) Enum() *VCNDependency_Type {
	p := new(VCNDependency_Type)
	*p = x
	return p
}

func (x VCNDependency_Type) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (VCNDependency_Type) Descriptor() protoreflect.EnumDescriptor {
	return file_lc_proto_enumTypes[0].Descriptor()
}

func (VCNDependency_Type) Type() protoreflect.EnumType {
	return &file_lc_proto_enumTypes[0]
}

func (x VCNDependency_Type) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use VCNDependency_Type.Descriptor instead.
func (VCNDependency_Type) EnumDescriptor() ([]byte, []int) {
	return file_lc_proto_rawDescGZIP(), []int{16, 0}
}

type VCNSearchRequest_Type int32

const (
	VCNSearchRequest_Artifact      VCNSearchRequest_Type = 0
	VCNSearchRequest_Dependencies  VCNSearchRequest_Type = 1
	VCNSearchRequest_WhatIncludes  VCNSearchRequest_Type = 2
	VCNSearchRequest_ArtifactTimed VCNSearchRequest_Type = 4
	VCNSearchRequest_Attachment    VCNSearchRequest_Type = 5
	VCNSearchRequest_ByApiKey      VCNSearchRequest_Type = 6
	VCNSearchRequest_ByName        VCNSearchRequest_Type = 7
	VCNSearchRequest_History       VCNSearchRequest_Type = 8
)

// Enum value maps for VCNSearchRequest_Type.
var (
	VCNSearchRequest_Type_name = map[int32]string{
		0: "Artifact",
		1: "Dependencies",
		2: "WhatIncludes",
		4: "ArtifactTimed",
		5: "Attachment",
		6: "ByApiKey",
		7: "ByName",
		8: "History",
	}
	VCNSearchRequest_Type_value = map[string]int32{
		"Artifact":      0,
		"Dependencies":  1,
		"WhatIncludes":  2,
		"ArtifactTimed": 4,
		"Attachment":    5,
		"ByApiKey":      6,
		"ByName":        7,
		"History":       8,
	}
)

func (x VCNSearchRequest_Type) Enum() *VCNSearchRequest_Type {
	p := new(VCNSearchRequest_Type)
	*p = x
	return p
}

func (x VCNSearchRequest_Type) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (VCNSearchRequest_Type) Descriptor() protoreflect.EnumDescriptor {
	return file_lc_proto_enumTypes[1].Descriptor()
}

func (VCNSearchRequest_Type) Type() protoreflect.EnumType {
	return &file_lc_proto_enumTypes[1]
}

func (x VCNSearchRequest_Type) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use VCNSearchRequest_Type.Descriptor instead.
func (VCNSearchRequest_Type) EnumDescriptor() ([]byte, []int) {
	return file_lc_proto_rawDescGZIP(), []int{22, 0}
}

type VCNSearchRequest_ArtifactType int32

const (
	VCNSearchRequest_Direct   VCNSearchRequest_ArtifactType = 0
	VCNSearchRequest_Indirect VCNSearchRequest_ArtifactType = 1
	VCNSearchRequest_Base     VCNSearchRequest_ArtifactType = 2
)

// Enum value maps for VCNSearchRequest_ArtifactType.
var (
	VCNSearchRequest_ArtifactType_name = map[int32]string{
		0: "Direct",
		1: "Indirect",
		2: "Base",
	}
	VCNSearchRequest_ArtifactType_value = map[string]int32{
		"Direct":   0,
		"Indirect": 1,
		"Base":     2,
	}
)

func (x VCNSearchRequest_ArtifactType) Enum() *VCNSearchRequest_ArtifactType {
	p := new(VCNSearchRequest_ArtifactType)
	*p = x
	return p
}

func (x VCNSearchRequest_ArtifactType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (VCNSearchRequest_ArtifactType) Descriptor() protoreflect.EnumDescriptor {
	return file_lc_proto_enumTypes[2].Descriptor()
}

func (VCNSearchRequest_ArtifactType) Type() protoreflect.EnumType {
	return &file_lc_proto_enumTypes[2]
}

func (x VCNSearchRequest_ArtifactType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use VCNSearchRequest_ArtifactType.Descriptor instead.
func (VCNSearchRequest_ArtifactType) EnumDescriptor() ([]byte, []int) {
	return file_lc_proto_rawDescGZIP(), []int{22, 1}
}

type VCNLabelsUpdateRequest_VCNLabelsOpType int32

const (
	VCNLabelsUpdateRequest_ADD    VCNLabelsUpdateRequest_VCNLabelsOpType = 0
	VCNLabelsUpdateRequest_DELETE VCNLabelsUpdateRequest_VCNLabelsOpType = 1
)

// Enum value maps for VCNLabelsUpdateRequest_VCNLabelsOpType.
var (
	VCNLabelsUpdateRequest_VCNLabelsOpType_name = map[int32]string{
		0: "ADD",
		1: "DELETE",
	}
	VCNLabelsUpdateRequest_VCNLabelsOpType_value = map[string]int32{
		"ADD":    0,
		"DELETE": 1,
	}
)

func (x VCNLabelsUpdateRequest_VCNLabelsOpType) Enum() *VCNLabelsUpdateRequest_VCNLabelsOpType {
	p := new(VCNLabelsUpdateRequest_VCNLabelsOpType)
	*p = x
	return p
}

func (x VCNLabelsUpdateRequest_VCNLabelsOpType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (VCNLabelsUpdateRequest_VCNLabelsOpType) Descriptor() protoreflect.EnumDescriptor {
	return file_lc_proto_enumTypes[3].Descriptor()
}

func (VCNLabelsUpdateRequest_VCNLabelsOpType) Type() protoreflect.EnumType {
	return &file_lc_proto_enumTypes[3]
}

func (x VCNLabelsUpdateRequest_VCNLabelsOpType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use VCNLabelsUpdateRequest_VCNLabelsOpType.Descriptor instead.
func (VCNLabelsUpdateRequest_VCNLabelsOpType) EnumDescriptor() ([]byte, []int) {
	return file_lc_proto_rawDescGZIP(), []int{25, 0}
}

type TamperReport struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Index uint64 `protobuf:"varint,1,opt,name=index,proto3" json:"index,omitempty"`
	Key   []byte `protobuf:"bytes,2,opt,name=key,proto3" json:"key,omitempty"`
	Root  []byte `protobuf:"bytes,3,opt,name=root,proto3" json:"root,omitempty"`
}

func (x *TamperReport) Reset() {
	*x = TamperReport{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lc_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TamperReport) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TamperReport) ProtoMessage() {}

func (x *TamperReport) ProtoReflect() protoreflect.Message {
	mi := &file_lc_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TamperReport.ProtoReflect.Descriptor instead.
func (*TamperReport) Descriptor() ([]byte, []int) {
	return file_lc_proto_rawDescGZIP(), []int{0}
}

func (x *TamperReport) GetIndex() uint64 {
	if x != nil {
		return x.Index
	}
	return 0
}

func (x *TamperReport) GetKey() []byte {
	if x != nil {
		return x.Key
	}
	return nil
}

func (x *TamperReport) GetRoot() []byte {
	if x != nil {
		return x.Root
	}
	return nil
}

type ReportOptions struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Payload   *TamperReport     `protobuf:"bytes,1,opt,name=payload,proto3" json:"payload,omitempty"`
	Signature *schema.Signature `protobuf:"bytes,2,opt,name=signature,proto3" json:"signature,omitempty"`
}

func (x *ReportOptions) Reset() {
	*x = ReportOptions{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lc_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReportOptions) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReportOptions) ProtoMessage() {}

func (x *ReportOptions) ProtoReflect() protoreflect.Message {
	mi := &file_lc_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReportOptions.ProtoReflect.Descriptor instead.
func (*ReportOptions) Descriptor() ([]byte, []int) {
	return file_lc_proto_rawDescGZIP(), []int{1}
}

func (x *ReportOptions) GetPayload() *TamperReport {
	if x != nil {
		return x.Payload
	}
	return nil
}

func (x *ReportOptions) GetSignature() *schema.Signature {
	if x != nil {
		return x.Signature
	}
	return nil
}

type DataValue struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name  string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Type  string `protobuf:"bytes,2,opt,name=type,proto3" json:"type,omitempty"`
	Value []byte `protobuf:"bytes,3,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *DataValue) Reset() {
	*x = DataValue{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lc_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DataValue) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DataValue) ProtoMessage() {}

func (x *DataValue) ProtoReflect() protoreflect.Message {
	mi := &file_lc_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DataValue.ProtoReflect.Descriptor instead.
func (*DataValue) Descriptor() ([]byte, []int) {
	return file_lc_proto_rawDescGZIP(), []int{2}
}

func (x *DataValue) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *DataValue) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *DataValue) GetValue() []byte {
	if x != nil {
		return x.Value
	}
	return nil
}

type Data struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Key       string `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	MsgID     int64  `protobuf:"varint,2,opt,name=msgID,proto3" json:"msgID,omitempty"`
	DbName    string `protobuf:"bytes,3,opt,name=dbName,proto3" json:"dbName,omitempty"`
	TableName string `protobuf:"bytes,4,opt,name=tableName,proto3" json:"tableName,omitempty"`
	Operation string `protobuf:"bytes,5,opt,name=operation,proto3" json:"operation,omitempty"`
	Data      []byte `protobuf:"bytes,6,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *Data) Reset() {
	*x = Data{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lc_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Data) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Data) ProtoMessage() {}

func (x *Data) ProtoReflect() protoreflect.Message {
	mi := &file_lc_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Data.ProtoReflect.Descriptor instead.
func (*Data) Descriptor() ([]byte, []int) {
	return file_lc_proto_rawDescGZIP(), []int{3}
}

func (x *Data) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

func (x *Data) GetMsgID() int64 {
	if x != nil {
		return x.MsgID
	}
	return 0
}

func (x *Data) GetDbName() string {
	if x != nil {
		return x.DbName
	}
	return ""
}

func (x *Data) GetTableName() string {
	if x != nil {
		return x.TableName
	}
	return ""
}

func (x *Data) GetOperation() string {
	if x != nil {
		return x.Operation
	}
	return ""
}

func (x *Data) GetData() []byte {
	if x != nil {
		return x.Data
	}
	return nil
}

type Response struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status       int32                  `protobuf:"varint,1,opt,name=status,proto3" json:"status,omitempty"`
	Msg          string                 `protobuf:"bytes,2,opt,name=msg,proto3" json:"msg,omitempty"`
	MsgID        int64                  `protobuf:"varint,3,opt,name=msgID,proto3" json:"msgID,omitempty"`
	VerifiableTx *schema.VerifiableTx   `protobuf:"bytes,4,opt,name=VerifiableTx,proto3" json:"VerifiableTx,omitempty"`
	State        *schema.ImmutableState `protobuf:"bytes,5,opt,name=state,proto3" json:"state,omitempty"`
}

func (x *Response) Reset() {
	*x = Response{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lc_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Response) ProtoMessage() {}

func (x *Response) ProtoReflect() protoreflect.Message {
	mi := &file_lc_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Response.ProtoReflect.Descriptor instead.
func (*Response) Descriptor() ([]byte, []int) {
	return file_lc_proto_rawDescGZIP(), []int{4}
}

func (x *Response) GetStatus() int32 {
	if x != nil {
		return x.Status
	}
	return 0
}

func (x *Response) GetMsg() string {
	if x != nil {
		return x.Msg
	}
	return ""
}

func (x *Response) GetMsgID() int64 {
	if x != nil {
		return x.MsgID
	}
	return 0
}

func (x *Response) GetVerifiableTx() *schema.VerifiableTx {
	if x != nil {
		return x.VerifiableTx
	}
	return nil
}

func (x *Response) GetState() *schema.ImmutableState {
	if x != nil {
		return x.State
	}
	return nil
}

type VerifiableItemExt struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Item          *schema.VerifiableEntry `protobuf:"bytes,1,opt,name=item,proto3" json:"item,omitempty"`
	Timestamp     *timestamp.Timestamp    `protobuf:"bytes,2,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	ApikeyRevoked *timestamp.Timestamp    `protobuf:"bytes,3,opt,name=apikeyRevoked,proto3" json:"apikeyRevoked,omitempty"`
	LedgerName    string                  `protobuf:"bytes,4,opt,name=ledgerName,proto3" json:"ledgerName,omitempty"`
	PublicKey     string                  `protobuf:"bytes,5,opt,name=publicKey,proto3" json:"publicKey,omitempty"`
}

func (x *VerifiableItemExt) Reset() {
	*x = VerifiableItemExt{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lc_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VerifiableItemExt) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VerifiableItemExt) ProtoMessage() {}

func (x *VerifiableItemExt) ProtoReflect() protoreflect.Message {
	mi := &file_lc_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VerifiableItemExt.ProtoReflect.Descriptor instead.
func (*VerifiableItemExt) Descriptor() ([]byte, []int) {
	return file_lc_proto_rawDescGZIP(), []int{5}
}

func (x *VerifiableItemExt) GetItem() *schema.VerifiableEntry {
	if x != nil {
		return x.Item
	}
	return nil
}

func (x *VerifiableItemExt) GetTimestamp() *timestamp.Timestamp {
	if x != nil {
		return x.Timestamp
	}
	return nil
}

func (x *VerifiableItemExt) GetApikeyRevoked() *timestamp.Timestamp {
	if x != nil {
		return x.ApikeyRevoked
	}
	return nil
}

func (x *VerifiableItemExt) GetLedgerName() string {
	if x != nil {
		return x.LedgerName
	}
	return ""
}

func (x *VerifiableItemExt) GetPublicKey() string {
	if x != nil {
		return x.PublicKey
	}
	return ""
}

type ItemExt struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Item          *schema.Entry        `protobuf:"bytes,1,opt,name=item,proto3" json:"item,omitempty"`
	Timestamp     *timestamp.Timestamp `protobuf:"bytes,2,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	ApikeyRevoked *timestamp.Timestamp `protobuf:"bytes,3,opt,name=apikeyRevoked,proto3" json:"apikeyRevoked,omitempty"`
	LedgerName    string               `protobuf:"bytes,4,opt,name=ledgerName,proto3" json:"ledgerName,omitempty"`
}

func (x *ItemExt) Reset() {
	*x = ItemExt{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lc_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ItemExt) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ItemExt) ProtoMessage() {}

func (x *ItemExt) ProtoReflect() protoreflect.Message {
	mi := &file_lc_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ItemExt.ProtoReflect.Descriptor instead.
func (*ItemExt) Descriptor() ([]byte, []int) {
	return file_lc_proto_rawDescGZIP(), []int{6}
}

func (x *ItemExt) GetItem() *schema.Entry {
	if x != nil {
		return x.Item
	}
	return nil
}

func (x *ItemExt) GetTimestamp() *timestamp.Timestamp {
	if x != nil {
		return x.Timestamp
	}
	return nil
}

func (x *ItemExt) GetApikeyRevoked() *timestamp.Timestamp {
	if x != nil {
		return x.ApikeyRevoked
	}
	return nil
}

func (x *ItemExt) GetLedgerName() string {
	if x != nil {
		return x.LedgerName
	}
	return ""
}

type ItemExtList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Items []*ItemExt `protobuf:"bytes,1,rep,name=items,proto3" json:"items,omitempty"`
}

func (x *ItemExtList) Reset() {
	*x = ItemExtList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lc_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ItemExtList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ItemExtList) ProtoMessage() {}

func (x *ItemExtList) ProtoReflect() protoreflect.Message {
	mi := &file_lc_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ItemExtList.ProtoReflect.Descriptor instead.
func (*ItemExtList) Descriptor() ([]byte, []int) {
	return file_lc_proto_rawDescGZIP(), []int{7}
}

func (x *ItemExtList) GetItems() []*ItemExt {
	if x != nil {
		return x.Items
	}
	return nil
}

type ZItemExt struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Item          *schema.ZEntry       `protobuf:"bytes,1,opt,name=item,proto3" json:"item,omitempty"`
	Timestamp     *timestamp.Timestamp `protobuf:"bytes,2,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	ApikeyRevoked *timestamp.Timestamp `protobuf:"bytes,3,opt,name=apikeyRevoked,proto3" json:"apikeyRevoked,omitempty"`
	LedgerName    string               `protobuf:"bytes,4,opt,name=ledgerName,proto3" json:"ledgerName,omitempty"`
}

func (x *ZItemExt) Reset() {
	*x = ZItemExt{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lc_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ZItemExt) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ZItemExt) ProtoMessage() {}

func (x *ZItemExt) ProtoReflect() protoreflect.Message {
	mi := &file_lc_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ZItemExt.ProtoReflect.Descriptor instead.
func (*ZItemExt) Descriptor() ([]byte, []int) {
	return file_lc_proto_rawDescGZIP(), []int{8}
}

func (x *ZItemExt) GetItem() *schema.ZEntry {
	if x != nil {
		return x.Item
	}
	return nil
}

func (x *ZItemExt) GetTimestamp() *timestamp.Timestamp {
	if x != nil {
		return x.Timestamp
	}
	return nil
}

func (x *ZItemExt) GetApikeyRevoked() *timestamp.Timestamp {
	if x != nil {
		return x.ApikeyRevoked
	}
	return nil
}

func (x *ZItemExt) GetLedgerName() string {
	if x != nil {
		return x.LedgerName
	}
	return ""
}

type ZItemExtList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Items []*ZItemExt `protobuf:"bytes,1,rep,name=items,proto3" json:"items,omitempty"`
}

func (x *ZItemExtList) Reset() {
	*x = ZItemExtList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lc_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ZItemExtList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ZItemExtList) ProtoMessage() {}

func (x *ZItemExtList) ProtoReflect() protoreflect.Message {
	mi := &file_lc_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ZItemExtList.ProtoReflect.Descriptor instead.
func (*ZItemExtList) Descriptor() ([]byte, []int) {
	return file_lc_proto_rawDescGZIP(), []int{9}
}

func (x *ZItemExtList) GetItems() []*ZItemExt {
	if x != nil {
		return x.Items
	}
	return nil
}

type Features struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Feat      []string `protobuf:"bytes,1,rep,name=feat,proto3" json:"feat,omitempty"`
	Version   string   `protobuf:"bytes,2,opt,name=version,proto3" json:"version,omitempty"`
	BuildTime string   `protobuf:"bytes,3,opt,name=buildTime,proto3" json:"buildTime,omitempty"`
	Component string   `protobuf:"bytes,4,opt,name=component,proto3" json:"component,omitempty"`
}

func (x *Features) Reset() {
	*x = Features{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lc_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Features) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Features) ProtoMessage() {}

func (x *Features) ProtoReflect() protoreflect.Message {
	mi := &file_lc_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Features.ProtoReflect.Descriptor instead.
func (*Features) Descriptor() ([]byte, []int) {
	return file_lc_proto_rawDescGZIP(), []int{10}
}

func (x *Features) GetFeat() []string {
	if x != nil {
		return x.Feat
	}
	return nil
}

func (x *Features) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

func (x *Features) GetBuildTime() string {
	if x != nil {
		return x.BuildTime
	}
	return ""
}

func (x *Features) GetComponent() string {
	if x != nil {
		return x.Component
	}
	return ""
}

type VerifiableGetExtMultiRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Requests []*schema.VerifiableGetRequest `protobuf:"bytes,1,rep,name=requests,proto3" json:"requests,omitempty"`
}

func (x *VerifiableGetExtMultiRequest) Reset() {
	*x = VerifiableGetExtMultiRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lc_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VerifiableGetExtMultiRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VerifiableGetExtMultiRequest) ProtoMessage() {}

func (x *VerifiableGetExtMultiRequest) ProtoReflect() protoreflect.Message {
	mi := &file_lc_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VerifiableGetExtMultiRequest.ProtoReflect.Descriptor instead.
func (*VerifiableGetExtMultiRequest) Descriptor() ([]byte, []int) {
	return file_lc_proto_rawDescGZIP(), []int{11}
}

func (x *VerifiableGetExtMultiRequest) GetRequests() []*schema.VerifiableGetRequest {
	if x != nil {
		return x.Requests
	}
	return nil
}

type VerifiableGetExtMultiResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Items  []*VerifiableItemExt `protobuf:"bytes,1,rep,name=items,proto3" json:"items,omitempty"`
	Errors []string             `protobuf:"bytes,2,rep,name=errors,proto3" json:"errors,omitempty"`
}

func (x *VerifiableGetExtMultiResponse) Reset() {
	*x = VerifiableGetExtMultiResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lc_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VerifiableGetExtMultiResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VerifiableGetExtMultiResponse) ProtoMessage() {}

func (x *VerifiableGetExtMultiResponse) ProtoReflect() protoreflect.Message {
	mi := &file_lc_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VerifiableGetExtMultiResponse.ProtoReflect.Descriptor instead.
func (*VerifiableGetExtMultiResponse) Descriptor() ([]byte, []int) {
	return file_lc_proto_rawDescGZIP(), []int{12}
}

func (x *VerifiableGetExtMultiResponse) GetItems() []*VerifiableItemExt {
	if x != nil {
		return x.Items
	}
	return nil
}

func (x *VerifiableGetExtMultiResponse) GetErrors() []string {
	if x != nil {
		return x.Errors
	}
	return nil
}

type SetMultiRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Requests []*schema.SetRequest `protobuf:"bytes,1,rep,name=requests,proto3" json:"requests,omitempty"`
}

func (x *SetMultiRequest) Reset() {
	*x = SetMultiRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lc_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetMultiRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetMultiRequest) ProtoMessage() {}

func (x *SetMultiRequest) ProtoReflect() protoreflect.Message {
	mi := &file_lc_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetMultiRequest.ProtoReflect.Descriptor instead.
func (*SetMultiRequest) Descriptor() ([]byte, []int) {
	return file_lc_proto_rawDescGZIP(), []int{13}
}

func (x *SetMultiRequest) GetRequests() []*schema.SetRequest {
	if x != nil {
		return x.Requests
	}
	return nil
}

type SetMultiResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Transactions []*schema.TxHeader `protobuf:"bytes,1,rep,name=transactions,proto3" json:"transactions,omitempty"`
	Errors       []string           `protobuf:"bytes,2,rep,name=errors,proto3" json:"errors,omitempty"`
}

func (x *SetMultiResponse) Reset() {
	*x = SetMultiResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lc_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetMultiResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetMultiResponse) ProtoMessage() {}

func (x *SetMultiResponse) ProtoReflect() protoreflect.Message {
	mi := &file_lc_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetMultiResponse.ProtoReflect.Descriptor instead.
func (*SetMultiResponse) Descriptor() ([]byte, []int) {
	return file_lc_proto_rawDescGZIP(), []int{14}
}

func (x *SetMultiResponse) GetTransactions() []*schema.TxHeader {
	if x != nil {
		return x.Transactions
	}
	return nil
}

func (x *SetMultiResponse) GetErrors() []string {
	if x != nil {
		return x.Errors
	}
	return nil
}

type VCNAttachment struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Content   []byte `protobuf:"bytes,1,opt,name=content,proto3" json:"content,omitempty"`
	Signature []byte `protobuf:"bytes,2,opt,name=signature,proto3" json:"signature,omitempty"`
}

func (x *VCNAttachment) Reset() {
	*x = VCNAttachment{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lc_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VCNAttachment) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VCNAttachment) ProtoMessage() {}

func (x *VCNAttachment) ProtoReflect() protoreflect.Message {
	mi := &file_lc_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VCNAttachment.ProtoReflect.Descriptor instead.
func (*VCNAttachment) Descriptor() ([]byte, []int) {
	return file_lc_proto_rawDescGZIP(), []int{15}
}

func (x *VCNAttachment) GetContent() []byte {
	if x != nil {
		return x.Content
	}
	return nil
}

func (x *VCNAttachment) GetSignature() []byte {
	if x != nil {
		return x.Signature
	}
	return nil
}

type VCNDependency struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Hash string             `protobuf:"bytes,1,opt,name=hash,proto3" json:"hash,omitempty"`
	Type VCNDependency_Type `protobuf:"varint,2,opt,name=type,proto3,enum=lc.schema.VCNDependency_Type" json:"type,omitempty"`
}

func (x *VCNDependency) Reset() {
	*x = VCNDependency{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lc_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VCNDependency) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VCNDependency) ProtoMessage() {}

func (x *VCNDependency) ProtoReflect() protoreflect.Message {
	mi := &file_lc_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VCNDependency.ProtoReflect.Descriptor instead.
func (*VCNDependency) Descriptor() ([]byte, []int) {
	return file_lc_proto_rawDescGZIP(), []int{16}
}

func (x *VCNDependency) GetHash() string {
	if x != nil {
		return x.Hash
	}
	return ""
}

func (x *VCNDependency) GetType() VCNDependency_Type {
	if x != nil {
		return x.Type
	}
	return VCNDependency_Direct
}

type VCNArtifact struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Artifact     []byte           `protobuf:"bytes,1,opt,name=artifact,proto3" json:"artifact,omitempty"`
	Signature    []byte           `protobuf:"bytes,2,opt,name=signature,proto3" json:"signature,omitempty"`
	Dependencies []*VCNDependency `protobuf:"bytes,3,rep,name=dependencies,proto3" json:"dependencies,omitempty"`
	Attachments  []*VCNAttachment `protobuf:"bytes,4,rep,name=attachments,proto3" json:"attachments,omitempty"`
}

func (x *VCNArtifact) Reset() {
	*x = VCNArtifact{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lc_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VCNArtifact) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VCNArtifact) ProtoMessage() {}

func (x *VCNArtifact) ProtoReflect() protoreflect.Message {
	mi := &file_lc_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VCNArtifact.ProtoReflect.Descriptor instead.
func (*VCNArtifact) Descriptor() ([]byte, []int) {
	return file_lc_proto_rawDescGZIP(), []int{17}
}

func (x *VCNArtifact) GetArtifact() []byte {
	if x != nil {
		return x.Artifact
	}
	return nil
}

func (x *VCNArtifact) GetSignature() []byte {
	if x != nil {
		return x.Signature
	}
	return nil
}

func (x *VCNArtifact) GetDependencies() []*VCNDependency {
	if x != nil {
		return x.Dependencies
	}
	return nil
}

func (x *VCNArtifact) GetAttachments() []*VCNAttachment {
	if x != nil {
		return x.Attachments
	}
	return nil
}

type VCNArtifactsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Artifacts []*VCNArtifact       `protobuf:"bytes,1,rep,name=artifacts,proto3" json:"artifacts,omitempty"`
	SignedAt  *timestamp.Timestamp `protobuf:"bytes,2,opt,name=signedAt,proto3" json:"signedAt,omitempty"`
}

func (x *VCNArtifactsRequest) Reset() {
	*x = VCNArtifactsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lc_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VCNArtifactsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VCNArtifactsRequest) ProtoMessage() {}

func (x *VCNArtifactsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_lc_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VCNArtifactsRequest.ProtoReflect.Descriptor instead.
func (*VCNArtifactsRequest) Descriptor() ([]byte, []int) {
	return file_lc_proto_rawDescGZIP(), []int{18}
}

func (x *VCNArtifactsRequest) GetArtifacts() []*VCNArtifact {
	if x != nil {
		return x.Artifacts
	}
	return nil
}

func (x *VCNArtifactsRequest) GetSignedAt() *timestamp.Timestamp {
	if x != nil {
		return x.SignedAt
	}
	return nil
}

type VCNArtifactsGetRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Hashes       []string `protobuf:"bytes,1,rep,name=hashes,proto3" json:"hashes,omitempty"`
	Verify       bool     `protobuf:"varint,2,opt,name=verify,proto3" json:"verify,omitempty"`
	ProveSinceTx uint64   `protobuf:"varint,3,opt,name=proveSinceTx,proto3" json:"proveSinceTx,omitempty"`
}

func (x *VCNArtifactsGetRequest) Reset() {
	*x = VCNArtifactsGetRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lc_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VCNArtifactsGetRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VCNArtifactsGetRequest) ProtoMessage() {}

func (x *VCNArtifactsGetRequest) ProtoReflect() protoreflect.Message {
	mi := &file_lc_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VCNArtifactsGetRequest.ProtoReflect.Descriptor instead.
func (*VCNArtifactsGetRequest) Descriptor() ([]byte, []int) {
	return file_lc_proto_rawDescGZIP(), []int{19}
}

func (x *VCNArtifactsGetRequest) GetHashes() []string {
	if x != nil {
		return x.Hashes
	}
	return nil
}

func (x *VCNArtifactsGetRequest) GetVerify() bool {
	if x != nil {
		return x.Verify
	}
	return false
}

func (x *VCNArtifactsGetRequest) GetProveSinceTx() uint64 {
	if x != nil {
		return x.ProveSinceTx
	}
	return 0
}

type Proof struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	VerifiableTx   *schema.VerifiableTx   `protobuf:"bytes,1,opt,name=verifiableTx,proto3" json:"verifiableTx,omitempty"`
	InclusionProof *schema.InclusionProof `protobuf:"bytes,2,opt,name=inclusionProof,proto3" json:"inclusionProof,omitempty"`
	Metadata       *schema.KVMetadata     `protobuf:"bytes,3,opt,name=metadata,proto3" json:"metadata,omitempty"`
	ImmudbFullKey  []byte                 `protobuf:"bytes,4,opt,name=immudbFullKey,proto3" json:"immudbFullKey,omitempty"`
}

func (x *Proof) Reset() {
	*x = Proof{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lc_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Proof) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Proof) ProtoMessage() {}

func (x *Proof) ProtoReflect() protoreflect.Message {
	mi := &file_lc_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Proof.ProtoReflect.Descriptor instead.
func (*Proof) Descriptor() ([]byte, []int) {
	return file_lc_proto_rawDescGZIP(), []int{20}
}

func (x *Proof) GetVerifiableTx() *schema.VerifiableTx {
	if x != nil {
		return x.VerifiableTx
	}
	return nil
}

func (x *Proof) GetInclusionProof() *schema.InclusionProof {
	if x != nil {
		return x.InclusionProof
	}
	return nil
}

func (x *Proof) GetMetadata() *schema.KVMetadata {
	if x != nil {
		return x.Metadata
	}
	return nil
}

func (x *Proof) GetImmudbFullKey() []byte {
	if x != nil {
		return x.ImmudbFullKey
	}
	return nil
}

type VCNArtifactsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Transaction *schema.TxHeader `protobuf:"bytes,1,opt,name=transaction,proto3" json:"transaction,omitempty"`
}

func (x *VCNArtifactsResponse) Reset() {
	*x = VCNArtifactsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lc_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VCNArtifactsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VCNArtifactsResponse) ProtoMessage() {}

func (x *VCNArtifactsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_lc_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VCNArtifactsResponse.ProtoReflect.Descriptor instead.
func (*VCNArtifactsResponse) Descriptor() ([]byte, []int) {
	return file_lc_proto_rawDescGZIP(), []int{21}
}

func (x *VCNArtifactsResponse) GetTransaction() *schema.TxHeader {
	if x != nil {
		return x.Transaction
	}
	return nil
}

type VCNSearchRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Hash         string                        `protobuf:"bytes,1,opt,name=hash,proto3" json:"hash,omitempty"`
	SignerID     string                        `protobuf:"bytes,2,opt,name=signerID,proto3" json:"signerID,omitempty"`
	AType        VCNSearchRequest_ArtifactType `protobuf:"varint,3,opt,name=aType,proto3,enum=lc.schema.VCNSearchRequest_ArtifactType" json:"aType,omitempty"`
	Type         VCNSearchRequest_Type         `protobuf:"varint,4,opt,name=type,proto3,enum=lc.schema.VCNSearchRequest_Type" json:"type,omitempty"`
	Limit        uint64                        `protobuf:"varint,5,opt,name=Limit,proto3" json:"Limit,omitempty"`
	Desc         bool                          `protobuf:"varint,6,opt,name=Desc,proto3" json:"Desc,omitempty"`
	StartTS      int64                         `protobuf:"varint,8,opt,name=startTS,proto3" json:"startTS,omitempty"`
	EndTS        int64                         `protobuf:"varint,9,opt,name=endTS,proto3" json:"endTS,omitempty"`
	AttachName   string                        `protobuf:"bytes,10,opt,name=attachName,proto3" json:"attachName,omitempty"`
	ArtifactName string                        `protobuf:"bytes,11,opt,name=artifactName,proto3" json:"artifactName,omitempty"`
}

func (x *VCNSearchRequest) Reset() {
	*x = VCNSearchRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lc_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VCNSearchRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VCNSearchRequest) ProtoMessage() {}

func (x *VCNSearchRequest) ProtoReflect() protoreflect.Message {
	mi := &file_lc_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VCNSearchRequest.ProtoReflect.Descriptor instead.
func (*VCNSearchRequest) Descriptor() ([]byte, []int) {
	return file_lc_proto_rawDescGZIP(), []int{22}
}

func (x *VCNSearchRequest) GetHash() string {
	if x != nil {
		return x.Hash
	}
	return ""
}

func (x *VCNSearchRequest) GetSignerID() string {
	if x != nil {
		return x.SignerID
	}
	return ""
}

func (x *VCNSearchRequest) GetAType() VCNSearchRequest_ArtifactType {
	if x != nil {
		return x.AType
	}
	return VCNSearchRequest_Direct
}

func (x *VCNSearchRequest) GetType() VCNSearchRequest_Type {
	if x != nil {
		return x.Type
	}
	return VCNSearchRequest_Artifact
}

func (x *VCNSearchRequest) GetLimit() uint64 {
	if x != nil {
		return x.Limit
	}
	return 0
}

func (x *VCNSearchRequest) GetDesc() bool {
	if x != nil {
		return x.Desc
	}
	return false
}

func (x *VCNSearchRequest) GetStartTS() int64 {
	if x != nil {
		return x.StartTS
	}
	return 0
}

func (x *VCNSearchRequest) GetEndTS() int64 {
	if x != nil {
		return x.EndTS
	}
	return 0
}

func (x *VCNSearchRequest) GetAttachName() string {
	if x != nil {
		return x.AttachName
	}
	return ""
}

func (x *VCNSearchRequest) GetArtifactName() string {
	if x != nil {
		return x.ArtifactName
	}
	return ""
}

type Entry struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Key           []byte               `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	Value         []byte               `protobuf:"bytes,2,opt,name=value,proto3" json:"value,omitempty"`
	Tx            uint64               `protobuf:"varint,3,opt,name=tx,proto3" json:"tx,omitempty"`
	Timestamp     *timestamp.Timestamp `protobuf:"bytes,4,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	ApikeyRevoked *timestamp.Timestamp `protobuf:"bytes,5,opt,name=apikeyRevoked,proto3" json:"apikeyRevoked,omitempty"`
	LedgerName    string               `protobuf:"bytes,6,opt,name=ledgerName,proto3" json:"ledgerName,omitempty"`
	Proof         *Proof               `protobuf:"bytes,7,opt,name=proof,proto3" json:"proof,omitempty"`
}

func (x *Entry) Reset() {
	*x = Entry{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lc_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Entry) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Entry) ProtoMessage() {}

func (x *Entry) ProtoReflect() protoreflect.Message {
	mi := &file_lc_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Entry.ProtoReflect.Descriptor instead.
func (*Entry) Descriptor() ([]byte, []int) {
	return file_lc_proto_rawDescGZIP(), []int{23}
}

func (x *Entry) GetKey() []byte {
	if x != nil {
		return x.Key
	}
	return nil
}

func (x *Entry) GetValue() []byte {
	if x != nil {
		return x.Value
	}
	return nil
}

func (x *Entry) GetTx() uint64 {
	if x != nil {
		return x.Tx
	}
	return 0
}

func (x *Entry) GetTimestamp() *timestamp.Timestamp {
	if x != nil {
		return x.Timestamp
	}
	return nil
}

func (x *Entry) GetApikeyRevoked() *timestamp.Timestamp {
	if x != nil {
		return x.ApikeyRevoked
	}
	return nil
}

func (x *Entry) GetLedgerName() string {
	if x != nil {
		return x.LedgerName
	}
	return ""
}

func (x *Entry) GetProof() *Proof {
	if x != nil {
		return x.Proof
	}
	return nil
}

type EntryList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Entries []*Entry `protobuf:"bytes,1,rep,name=entries,proto3" json:"entries,omitempty"`
}

func (x *EntryList) Reset() {
	*x = EntryList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lc_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EntryList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EntryList) ProtoMessage() {}

func (x *EntryList) ProtoReflect() protoreflect.Message {
	mi := &file_lc_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EntryList.ProtoReflect.Descriptor instead.
func (*EntryList) Descriptor() ([]byte, []int) {
	return file_lc_proto_rawDescGZIP(), []int{24}
}

func (x *EntryList) GetEntries() []*Entry {
	if x != nil {
		return x.Entries
	}
	return nil
}

type VCNLabelsUpdateRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Hash string                                `protobuf:"bytes,1,opt,name=hash,proto3" json:"hash,omitempty"`
	Ops  []*VCNLabelsUpdateRequest_VCNLabelsOp `protobuf:"bytes,2,rep,name=ops,proto3" json:"ops,omitempty"`
}

func (x *VCNLabelsUpdateRequest) Reset() {
	*x = VCNLabelsUpdateRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lc_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VCNLabelsUpdateRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VCNLabelsUpdateRequest) ProtoMessage() {}

func (x *VCNLabelsUpdateRequest) ProtoReflect() protoreflect.Message {
	mi := &file_lc_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VCNLabelsUpdateRequest.ProtoReflect.Descriptor instead.
func (*VCNLabelsUpdateRequest) Descriptor() ([]byte, []int) {
	return file_lc_proto_rawDescGZIP(), []int{25}
}

func (x *VCNLabelsUpdateRequest) GetHash() string {
	if x != nil {
		return x.Hash
	}
	return ""
}

func (x *VCNLabelsUpdateRequest) GetOps() []*VCNLabelsUpdateRequest_VCNLabelsOp {
	if x != nil {
		return x.Ops
	}
	return nil
}

type VCNLabelsUpdateResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Transaction *schema.TxHeader `protobuf:"bytes,1,opt,name=transaction,proto3" json:"transaction,omitempty"`
}

func (x *VCNLabelsUpdateResponse) Reset() {
	*x = VCNLabelsUpdateResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lc_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VCNLabelsUpdateResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VCNLabelsUpdateResponse) ProtoMessage() {}

func (x *VCNLabelsUpdateResponse) ProtoReflect() protoreflect.Message {
	mi := &file_lc_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VCNLabelsUpdateResponse.ProtoReflect.Descriptor instead.
func (*VCNLabelsUpdateResponse) Descriptor() ([]byte, []int) {
	return file_lc_proto_rawDescGZIP(), []int{26}
}

func (x *VCNLabelsUpdateResponse) GetTransaction() *schema.TxHeader {
	if x != nil {
		return x.Transaction
	}
	return nil
}

type VCNLabelsSetRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Hash   string   `protobuf:"bytes,1,opt,name=hash,proto3" json:"hash,omitempty"`
	Labels []string `protobuf:"bytes,2,rep,name=labels,proto3" json:"labels,omitempty"`
}

func (x *VCNLabelsSetRequest) Reset() {
	*x = VCNLabelsSetRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lc_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VCNLabelsSetRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VCNLabelsSetRequest) ProtoMessage() {}

func (x *VCNLabelsSetRequest) ProtoReflect() protoreflect.Message {
	mi := &file_lc_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VCNLabelsSetRequest.ProtoReflect.Descriptor instead.
func (*VCNLabelsSetRequest) Descriptor() ([]byte, []int) {
	return file_lc_proto_rawDescGZIP(), []int{27}
}

func (x *VCNLabelsSetRequest) GetHash() string {
	if x != nil {
		return x.Hash
	}
	return ""
}

func (x *VCNLabelsSetRequest) GetLabels() []string {
	if x != nil {
		return x.Labels
	}
	return nil
}

type VCNLabelsBulkSetRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Request []*VCNLabelsSetRequest `protobuf:"bytes,1,rep,name=request,proto3" json:"request,omitempty"`
}

func (x *VCNLabelsBulkSetRequest) Reset() {
	*x = VCNLabelsBulkSetRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lc_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VCNLabelsBulkSetRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VCNLabelsBulkSetRequest) ProtoMessage() {}

func (x *VCNLabelsBulkSetRequest) ProtoReflect() protoreflect.Message {
	mi := &file_lc_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VCNLabelsBulkSetRequest.ProtoReflect.Descriptor instead.
func (*VCNLabelsBulkSetRequest) Descriptor() ([]byte, []int) {
	return file_lc_proto_rawDescGZIP(), []int{28}
}

func (x *VCNLabelsBulkSetRequest) GetRequest() []*VCNLabelsSetRequest {
	if x != nil {
		return x.Request
	}
	return nil
}

type VCNLabelsSetResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Transaction *schema.TxHeader `protobuf:"bytes,1,opt,name=transaction,proto3" json:"transaction,omitempty"`
}

func (x *VCNLabelsSetResponse) Reset() {
	*x = VCNLabelsSetResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lc_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VCNLabelsSetResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VCNLabelsSetResponse) ProtoMessage() {}

func (x *VCNLabelsSetResponse) ProtoReflect() protoreflect.Message {
	mi := &file_lc_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VCNLabelsSetResponse.ProtoReflect.Descriptor instead.
func (*VCNLabelsSetResponse) Descriptor() ([]byte, []int) {
	return file_lc_proto_rawDescGZIP(), []int{29}
}

func (x *VCNLabelsSetResponse) GetTransaction() *schema.TxHeader {
	if x != nil {
		return x.Transaction
	}
	return nil
}

type VCNLabelsGetRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Hash     string `protobuf:"bytes,1,opt,name=hash,proto3" json:"hash,omitempty"`
	SignerID string `protobuf:"bytes,2,opt,name=signerID,proto3" json:"signerID,omitempty"`
}

func (x *VCNLabelsGetRequest) Reset() {
	*x = VCNLabelsGetRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lc_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VCNLabelsGetRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VCNLabelsGetRequest) ProtoMessage() {}

func (x *VCNLabelsGetRequest) ProtoReflect() protoreflect.Message {
	mi := &file_lc_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VCNLabelsGetRequest.ProtoReflect.Descriptor instead.
func (*VCNLabelsGetRequest) Descriptor() ([]byte, []int) {
	return file_lc_proto_rawDescGZIP(), []int{30}
}

func (x *VCNLabelsGetRequest) GetHash() string {
	if x != nil {
		return x.Hash
	}
	return ""
}

func (x *VCNLabelsGetRequest) GetSignerID() string {
	if x != nil {
		return x.SignerID
	}
	return ""
}

type VCNLabelsGetResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Labels []string `protobuf:"bytes,1,rep,name=labels,proto3" json:"labels,omitempty"`
}

func (x *VCNLabelsGetResponse) Reset() {
	*x = VCNLabelsGetResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lc_proto_msgTypes[31]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VCNLabelsGetResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VCNLabelsGetResponse) ProtoMessage() {}

func (x *VCNLabelsGetResponse) ProtoReflect() protoreflect.Message {
	mi := &file_lc_proto_msgTypes[31]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VCNLabelsGetResponse.ProtoReflect.Descriptor instead.
func (*VCNLabelsGetResponse) Descriptor() ([]byte, []int) {
	return file_lc_proto_rawDescGZIP(), []int{31}
}

func (x *VCNLabelsGetResponse) GetLabels() []string {
	if x != nil {
		return x.Labels
	}
	return nil
}

type VCNGetAttachmentRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SignerID       string `protobuf:"bytes,1,opt,name=signerID,proto3" json:"signerID,omitempty"`
	ArtifactHash   string `protobuf:"bytes,2,opt,name=artifactHash,proto3" json:"artifactHash,omitempty"`
	AttachmentHash string `protobuf:"bytes,3,opt,name=attachmentHash,proto3" json:"attachmentHash,omitempty"`
}

func (x *VCNGetAttachmentRequest) Reset() {
	*x = VCNGetAttachmentRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lc_proto_msgTypes[32]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VCNGetAttachmentRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VCNGetAttachmentRequest) ProtoMessage() {}

func (x *VCNGetAttachmentRequest) ProtoReflect() protoreflect.Message {
	mi := &file_lc_proto_msgTypes[32]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VCNGetAttachmentRequest.ProtoReflect.Descriptor instead.
func (*VCNGetAttachmentRequest) Descriptor() ([]byte, []int) {
	return file_lc_proto_rawDescGZIP(), []int{32}
}

func (x *VCNGetAttachmentRequest) GetSignerID() string {
	if x != nil {
		return x.SignerID
	}
	return ""
}

func (x *VCNGetAttachmentRequest) GetArtifactHash() string {
	if x != nil {
		return x.ArtifactHash
	}
	return ""
}

func (x *VCNGetAttachmentRequest) GetAttachmentHash() string {
	if x != nil {
		return x.AttachmentHash
	}
	return ""
}

type VCNGetAttachmentResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Attachment []byte `protobuf:"bytes,1,opt,name=attachment,proto3" json:"attachment,omitempty"`
}

func (x *VCNGetAttachmentResponse) Reset() {
	*x = VCNGetAttachmentResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lc_proto_msgTypes[33]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VCNGetAttachmentResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VCNGetAttachmentResponse) ProtoMessage() {}

func (x *VCNGetAttachmentResponse) ProtoReflect() protoreflect.Message {
	mi := &file_lc_proto_msgTypes[33]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VCNGetAttachmentResponse.ProtoReflect.Descriptor instead.
func (*VCNGetAttachmentResponse) Descriptor() ([]byte, []int) {
	return file_lc_proto_rawDescGZIP(), []int{33}
}

func (x *VCNGetAttachmentResponse) GetAttachment() []byte {
	if x != nil {
		return x.Attachment
	}
	return nil
}

type VCNLabelsUpdateRequest_VCNLabelsOp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OpType VCNLabelsUpdateRequest_VCNLabelsOpType `protobuf:"varint,1,opt,name=opType,proto3,enum=lc.schema.VCNLabelsUpdateRequest_VCNLabelsOpType" json:"opType,omitempty"`
	Labels []string                               `protobuf:"bytes,2,rep,name=labels,proto3" json:"labels,omitempty"`
}

func (x *VCNLabelsUpdateRequest_VCNLabelsOp) Reset() {
	*x = VCNLabelsUpdateRequest_VCNLabelsOp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lc_proto_msgTypes[34]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VCNLabelsUpdateRequest_VCNLabelsOp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VCNLabelsUpdateRequest_VCNLabelsOp) ProtoMessage() {}

func (x *VCNLabelsUpdateRequest_VCNLabelsOp) ProtoReflect() protoreflect.Message {
	mi := &file_lc_proto_msgTypes[34]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VCNLabelsUpdateRequest_VCNLabelsOp.ProtoReflect.Descriptor instead.
func (*VCNLabelsUpdateRequest_VCNLabelsOp) Descriptor() ([]byte, []int) {
	return file_lc_proto_rawDescGZIP(), []int{25, 0}
}

func (x *VCNLabelsUpdateRequest_VCNLabelsOp) GetOpType() VCNLabelsUpdateRequest_VCNLabelsOpType {
	if x != nil {
		return x.OpType
	}
	return VCNLabelsUpdateRequest_ADD
}

func (x *VCNLabelsUpdateRequest_VCNLabelsOp) GetLabels() []string {
	if x != nil {
		return x.Labels
	}
	return nil
}

var File_lc_proto protoreflect.FileDescriptor

var file_lc_proto_rawDesc = []byte{
	0x0a, 0x08, 0x6c, 0x63, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x09, 0x6c, 0x63, 0x2e, 0x73,
	0x63, 0x68, 0x65, 0x6d, 0x61, 0x1a, 0x0c, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x1a, 0x1b, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2f, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x22, 0x4a, 0x0a, 0x0c, 0x54, 0x61, 0x6d, 0x70, 0x65, 0x72, 0x52, 0x65, 0x70, 0x6f, 0x72,
	0x74, 0x12, 0x14, 0x0a, 0x05, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x05, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0c, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x12, 0x0a, 0x04, 0x72, 0x6f, 0x6f,
	0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x04, 0x72, 0x6f, 0x6f, 0x74, 0x22, 0x7a, 0x0a,
	0x0d, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x31,
	0x0a, 0x07, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x17, 0x2e, 0x6c, 0x63, 0x2e, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x2e, 0x54, 0x61, 0x6d, 0x70,
	0x65, 0x72, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x52, 0x07, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61,
	0x64, 0x12, 0x36, 0x0a, 0x09, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x69, 0x6d, 0x6d, 0x75, 0x64, 0x62, 0x2e, 0x73, 0x63,
	0x68, 0x65, 0x6d, 0x61, 0x2e, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x52, 0x09,
	0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x22, 0x49, 0x0a, 0x09, 0x44, 0x61, 0x74,
	0x61, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79,
	0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x14,
	0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x22, 0x96, 0x01, 0x0a, 0x04, 0x44, 0x61, 0x74, 0x61, 0x12, 0x10, 0x0a,
	0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12,
	0x14, 0x0a, 0x05, 0x6d, 0x73, 0x67, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05,
	0x6d, 0x73, 0x67, 0x49, 0x44, 0x12, 0x16, 0x0a, 0x06, 0x64, 0x62, 0x4e, 0x61, 0x6d, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x64, 0x62, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1c, 0x0a,
	0x09, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x09, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x6f,
	0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09,
	0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x61, 0x74,
	0x61, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0xc0, 0x01,
	0x0a, 0x08, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x12, 0x10, 0x0a, 0x03, 0x6d, 0x73, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x03, 0x6d, 0x73, 0x67, 0x12, 0x14, 0x0a, 0x05, 0x6d, 0x73, 0x67, 0x49, 0x44, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x05, 0x6d, 0x73, 0x67, 0x49, 0x44, 0x12, 0x3f, 0x0a, 0x0c, 0x56, 0x65,
	0x72, 0x69, 0x66, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x54, 0x78, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1b, 0x2e, 0x69, 0x6d, 0x6d, 0x75, 0x64, 0x62, 0x2e, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61,
	0x2e, 0x56, 0x65, 0x72, 0x69, 0x66, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x54, 0x78, 0x52, 0x0c, 0x56,
	0x65, 0x72, 0x69, 0x66, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x54, 0x78, 0x12, 0x33, 0x0a, 0x05, 0x73,
	0x74, 0x61, 0x74, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x69, 0x6d, 0x6d,
	0x75, 0x64, 0x62, 0x2e, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x2e, 0x49, 0x6d, 0x6d, 0x75, 0x74,
	0x61, 0x62, 0x6c, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65,
	0x22, 0x81, 0x02, 0x0a, 0x11, 0x56, 0x65, 0x72, 0x69, 0x66, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x49,
	0x74, 0x65, 0x6d, 0x45, 0x78, 0x74, 0x12, 0x32, 0x0a, 0x04, 0x69, 0x74, 0x65, 0x6d, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x69, 0x6d, 0x6d, 0x75, 0x64, 0x62, 0x2e, 0x73, 0x63,
	0x68, 0x65, 0x6d, 0x61, 0x2e, 0x56, 0x65, 0x72, 0x69, 0x66, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x52, 0x04, 0x69, 0x74, 0x65, 0x6d, 0x12, 0x38, 0x0a, 0x09, 0x74, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x12, 0x40, 0x0a, 0x0d, 0x61, 0x70, 0x69, 0x6b, 0x65, 0x79, 0x52, 0x65,
	0x76, 0x6f, 0x6b, 0x65, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0d, 0x61, 0x70, 0x69, 0x6b, 0x65, 0x79, 0x52,
	0x65, 0x76, 0x6f, 0x6b, 0x65, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x72,
	0x4e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x6c, 0x65, 0x64, 0x67,
	0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63,
	0x4b, 0x65, 0x79, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x75, 0x62, 0x6c, 0x69,
	0x63, 0x4b, 0x65, 0x79, 0x22, 0xcf, 0x01, 0x0a, 0x07, 0x49, 0x74, 0x65, 0x6d, 0x45, 0x78, 0x74,
	0x12, 0x28, 0x0a, 0x04, 0x69, 0x74, 0x65, 0x6d, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14,
	0x2e, 0x69, 0x6d, 0x6d, 0x75, 0x64, 0x62, 0x2e, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x2e, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x52, 0x04, 0x69, 0x74, 0x65, 0x6d, 0x12, 0x38, 0x0a, 0x09, 0x74, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x12, 0x40, 0x0a, 0x0d, 0x61, 0x70, 0x69, 0x6b, 0x65, 0x79, 0x52, 0x65,
	0x76, 0x6f, 0x6b, 0x65, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0d, 0x61, 0x70, 0x69, 0x6b, 0x65, 0x79, 0x52,
	0x65, 0x76, 0x6f, 0x6b, 0x65, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x72,
	0x4e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x6c, 0x65, 0x64, 0x67,
	0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0x37, 0x0a, 0x0b, 0x49, 0x74, 0x65, 0x6d, 0x45, 0x78,
	0x74, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x28, 0x0a, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x6c, 0x63, 0x2e, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61,
	0x2e, 0x49, 0x74, 0x65, 0x6d, 0x45, 0x78, 0x74, 0x52, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x22,
	0xd1, 0x01, 0x0a, 0x08, 0x5a, 0x49, 0x74, 0x65, 0x6d, 0x45, 0x78, 0x74, 0x12, 0x29, 0x0a, 0x04,
	0x69, 0x74, 0x65, 0x6d, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x69, 0x6d, 0x6d,
	0x75, 0x64, 0x62, 0x2e, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x2e, 0x5a, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x52, 0x04, 0x69, 0x74, 0x65, 0x6d, 0x12, 0x38, 0x0a, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x12, 0x40, 0x0a, 0x0d, 0x61, 0x70, 0x69, 0x6b, 0x65, 0x79, 0x52, 0x65, 0x76, 0x6f, 0x6b,
	0x65, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x52, 0x0d, 0x61, 0x70, 0x69, 0x6b, 0x65, 0x79, 0x52, 0x65, 0x76, 0x6f,
	0x6b, 0x65, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x72, 0x4e, 0x61, 0x6d,
	0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x72, 0x4e,
	0x61, 0x6d, 0x65, 0x22, 0x39, 0x0a, 0x0c, 0x5a, 0x49, 0x74, 0x65, 0x6d, 0x45, 0x78, 0x74, 0x4c,
	0x69, 0x73, 0x74, 0x12, 0x29, 0x0a, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x13, 0x2e, 0x6c, 0x63, 0x2e, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x2e, 0x5a,
	0x49, 0x74, 0x65, 0x6d, 0x45, 0x78, 0x74, 0x52, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x22, 0x74,
	0x0a, 0x08, 0x46, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x66, 0x65,
	0x61, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x04, 0x66, 0x65, 0x61, 0x74, 0x12, 0x18,
	0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x1c, 0x0a, 0x09, 0x62, 0x75, 0x69, 0x6c,
	0x64, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x62, 0x75, 0x69,
	0x6c, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e,
	0x65, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x63, 0x6f, 0x6d, 0x70, 0x6f,
	0x6e, 0x65, 0x6e, 0x74, 0x22, 0x5f, 0x0a, 0x1c, 0x56, 0x65, 0x72, 0x69, 0x66, 0x69, 0x61, 0x62,
	0x6c, 0x65, 0x47, 0x65, 0x74, 0x45, 0x78, 0x74, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x3f, 0x0a, 0x08, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x73,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x69, 0x6d, 0x6d, 0x75, 0x64, 0x62, 0x2e,
	0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x2e, 0x56, 0x65, 0x72, 0x69, 0x66, 0x69, 0x61, 0x62, 0x6c,
	0x65, 0x47, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x08, 0x72, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x73, 0x22, 0x6b, 0x0a, 0x1d, 0x56, 0x65, 0x72, 0x69, 0x66, 0x69, 0x61,
	0x62, 0x6c, 0x65, 0x47, 0x65, 0x74, 0x45, 0x78, 0x74, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x32, 0x0a, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x6c, 0x63, 0x2e, 0x73, 0x63, 0x68, 0x65, 0x6d,
	0x61, 0x2e, 0x56, 0x65, 0x72, 0x69, 0x66, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x49, 0x74, 0x65, 0x6d,
	0x45, 0x78, 0x74, 0x52, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x65, 0x72,
	0x72, 0x6f, 0x72, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x06, 0x65, 0x72, 0x72, 0x6f,
	0x72, 0x73, 0x22, 0x48, 0x0a, 0x0f, 0x53, 0x65, 0x74, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x35, 0x0a, 0x08, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x69, 0x6d, 0x6d, 0x75, 0x64, 0x62,
	0x2e, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x2e, 0x53, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x52, 0x08, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x73, 0x22, 0x67, 0x0a, 0x10,
	0x53, 0x65, 0x74, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x3b, 0x0a, 0x0c, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x69, 0x6d, 0x6d, 0x75, 0x64, 0x62, 0x2e,
	0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x2e, 0x54, 0x78, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x52,
	0x0c, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x16, 0x0a,
	0x06, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x06, 0x65,
	0x72, 0x72, 0x6f, 0x72, 0x73, 0x22, 0x47, 0x0a, 0x0d, 0x56, 0x43, 0x4e, 0x41, 0x74, 0x74, 0x61,
	0x63, 0x68, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e,
	0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74,
	0x12, 0x1c, 0x0a, 0x09, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0c, 0x52, 0x09, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x22, 0x82,
	0x01, 0x0a, 0x0d, 0x56, 0x43, 0x4e, 0x44, 0x65, 0x70, 0x65, 0x6e, 0x64, 0x65, 0x6e, 0x63, 0x79,
	0x12, 0x12, 0x0a, 0x04, 0x68, 0x61, 0x73, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x68, 0x61, 0x73, 0x68, 0x12, 0x31, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x1d, 0x2e, 0x6c, 0x63, 0x2e, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x2e, 0x56,
	0x43, 0x4e, 0x44, 0x65, 0x70, 0x65, 0x6e, 0x64, 0x65, 0x6e, 0x63, 0x79, 0x2e, 0x54, 0x79, 0x70,
	0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x22, 0x2a, 0x0a, 0x04, 0x54, 0x79, 0x70, 0x65, 0x12,
	0x0a, 0x0a, 0x06, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x10, 0x00, 0x12, 0x0c, 0x0a, 0x08, 0x49,
	0x6e, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x10, 0x01, 0x12, 0x08, 0x0a, 0x04, 0x42, 0x61, 0x73,
	0x65, 0x10, 0x02, 0x22, 0xc1, 0x01, 0x0a, 0x0b, 0x56, 0x43, 0x4e, 0x41, 0x72, 0x74, 0x69, 0x66,
	0x61, 0x63, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x61, 0x72, 0x74, 0x69, 0x66, 0x61, 0x63, 0x74, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x08, 0x61, 0x72, 0x74, 0x69, 0x66, 0x61, 0x63, 0x74, 0x12,
	0x1c, 0x0a, 0x09, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0c, 0x52, 0x09, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x12, 0x3c, 0x0a,
	0x0c, 0x64, 0x65, 0x70, 0x65, 0x6e, 0x64, 0x65, 0x6e, 0x63, 0x69, 0x65, 0x73, 0x18, 0x03, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x6c, 0x63, 0x2e, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x2e,
	0x56, 0x43, 0x4e, 0x44, 0x65, 0x70, 0x65, 0x6e, 0x64, 0x65, 0x6e, 0x63, 0x79, 0x52, 0x0c, 0x64,
	0x65, 0x70, 0x65, 0x6e, 0x64, 0x65, 0x6e, 0x63, 0x69, 0x65, 0x73, 0x12, 0x3a, 0x0a, 0x0b, 0x61,
	0x74, 0x74, 0x61, 0x63, 0x68, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x18, 0x2e, 0x6c, 0x63, 0x2e, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x2e, 0x56, 0x43, 0x4e,
	0x41, 0x74, 0x74, 0x61, 0x63, 0x68, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x0b, 0x61, 0x74, 0x74, 0x61,
	0x63, 0x68, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x22, 0x83, 0x01, 0x0a, 0x13, 0x56, 0x43, 0x4e, 0x41,
	0x72, 0x74, 0x69, 0x66, 0x61, 0x63, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x34, 0x0a, 0x09, 0x61, 0x72, 0x74, 0x69, 0x66, 0x61, 0x63, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x16, 0x2e, 0x6c, 0x63, 0x2e, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x2e, 0x56,
	0x43, 0x4e, 0x41, 0x72, 0x74, 0x69, 0x66, 0x61, 0x63, 0x74, 0x52, 0x09, 0x61, 0x72, 0x74, 0x69,
	0x66, 0x61, 0x63, 0x74, 0x73, 0x12, 0x36, 0x0a, 0x08, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x41,
	0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x52, 0x08, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x41, 0x74, 0x22, 0x6c, 0x0a,
	0x16, 0x56, 0x43, 0x4e, 0x41, 0x72, 0x74, 0x69, 0x66, 0x61, 0x63, 0x74, 0x73, 0x47, 0x65, 0x74,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x68, 0x61, 0x73, 0x68, 0x65,
	0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x06, 0x68, 0x61, 0x73, 0x68, 0x65, 0x73, 0x12,
	0x16, 0x0a, 0x06, 0x76, 0x65, 0x72, 0x69, 0x66, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x06, 0x76, 0x65, 0x72, 0x69, 0x66, 0x79, 0x12, 0x22, 0x0a, 0x0c, 0x70, 0x72, 0x6f, 0x76, 0x65,
	0x53, 0x69, 0x6e, 0x63, 0x65, 0x54, 0x78, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0c, 0x70,
	0x72, 0x6f, 0x76, 0x65, 0x53, 0x69, 0x6e, 0x63, 0x65, 0x54, 0x78, 0x22, 0xec, 0x01, 0x0a, 0x05,
	0x50, 0x72, 0x6f, 0x6f, 0x66, 0x12, 0x3f, 0x0a, 0x0c, 0x76, 0x65, 0x72, 0x69, 0x66, 0x69, 0x61,
	0x62, 0x6c, 0x65, 0x54, 0x78, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x69, 0x6d,
	0x6d, 0x75, 0x64, 0x62, 0x2e, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x2e, 0x56, 0x65, 0x72, 0x69,
	0x66, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x54, 0x78, 0x52, 0x0c, 0x76, 0x65, 0x72, 0x69, 0x66, 0x69,
	0x61, 0x62, 0x6c, 0x65, 0x54, 0x78, 0x12, 0x45, 0x0a, 0x0e, 0x69, 0x6e, 0x63, 0x6c, 0x75, 0x73,
	0x69, 0x6f, 0x6e, 0x50, 0x72, 0x6f, 0x6f, 0x66, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d,
	0x2e, 0x69, 0x6d, 0x6d, 0x75, 0x64, 0x62, 0x2e, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x2e, 0x49,
	0x6e, 0x63, 0x6c, 0x75, 0x73, 0x69, 0x6f, 0x6e, 0x50, 0x72, 0x6f, 0x6f, 0x66, 0x52, 0x0e, 0x69,
	0x6e, 0x63, 0x6c, 0x75, 0x73, 0x69, 0x6f, 0x6e, 0x50, 0x72, 0x6f, 0x6f, 0x66, 0x12, 0x35, 0x0a,
	0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x19, 0x2e, 0x69, 0x6d, 0x6d, 0x75, 0x64, 0x62, 0x2e, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x2e,
	0x4b, 0x56, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x52, 0x08, 0x6d, 0x65, 0x74, 0x61,
	0x64, 0x61, 0x74, 0x61, 0x12, 0x24, 0x0a, 0x0d, 0x69, 0x6d, 0x6d, 0x75, 0x64, 0x62, 0x46, 0x75,
	0x6c, 0x6c, 0x4b, 0x65, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0d, 0x69, 0x6d, 0x6d,
	0x75, 0x64, 0x62, 0x46, 0x75, 0x6c, 0x6c, 0x4b, 0x65, 0x79, 0x22, 0x51, 0x0a, 0x14, 0x56, 0x43,
	0x4e, 0x41, 0x72, 0x74, 0x69, 0x66, 0x61, 0x63, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x39, 0x0a, 0x0b, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x69, 0x6d, 0x6d, 0x75, 0x64, 0x62,
	0x2e, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x2e, 0x54, 0x78, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72,
	0x52, 0x0b, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x8f, 0x04,
	0x0a, 0x10, 0x56, 0x43, 0x4e, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x68, 0x61, 0x73, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x68, 0x61, 0x73, 0x68, 0x12, 0x1a, 0x0a, 0x08, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x72,
	0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x72,
	0x49, 0x44, 0x12, 0x3e, 0x0a, 0x05, 0x61, 0x54, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x28, 0x2e, 0x6c, 0x63, 0x2e, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x2e, 0x56, 0x43,
	0x4e, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x41,
	0x72, 0x74, 0x69, 0x66, 0x61, 0x63, 0x74, 0x54, 0x79, 0x70, 0x65, 0x52, 0x05, 0x61, 0x54, 0x79,
	0x70, 0x65, 0x12, 0x34, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x20, 0x2e, 0x6c, 0x63, 0x2e, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x2e, 0x56, 0x43, 0x4e,
	0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x54, 0x79,
	0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x4c, 0x69, 0x6d, 0x69,
	0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x04, 0x52, 0x05, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x12,
	0x0a, 0x04, 0x44, 0x65, 0x73, 0x63, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x04, 0x44, 0x65,
	0x73, 0x63, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x74, 0x61, 0x72, 0x74, 0x54, 0x53, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x07, 0x73, 0x74, 0x61, 0x72, 0x74, 0x54, 0x53, 0x12, 0x14, 0x0a, 0x05,
	0x65, 0x6e, 0x64, 0x54, 0x53, 0x18, 0x09, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x65, 0x6e, 0x64,
	0x54, 0x53, 0x12, 0x1e, 0x0a, 0x0a, 0x61, 0x74, 0x74, 0x61, 0x63, 0x68, 0x4e, 0x61, 0x6d, 0x65,
	0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x61, 0x74, 0x74, 0x61, 0x63, 0x68, 0x4e, 0x61,
	0x6d, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x61, 0x72, 0x74, 0x69, 0x66, 0x61, 0x63, 0x74, 0x4e, 0x61,
	0x6d, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x61, 0x72, 0x74, 0x69, 0x66, 0x61,
	0x63, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0x82, 0x01, 0x0a, 0x04, 0x54, 0x79, 0x70, 0x65, 0x12,
	0x0c, 0x0a, 0x08, 0x41, 0x72, 0x74, 0x69, 0x66, 0x61, 0x63, 0x74, 0x10, 0x00, 0x12, 0x10, 0x0a,
	0x0c, 0x44, 0x65, 0x70, 0x65, 0x6e, 0x64, 0x65, 0x6e, 0x63, 0x69, 0x65, 0x73, 0x10, 0x01, 0x12,
	0x10, 0x0a, 0x0c, 0x57, 0x68, 0x61, 0x74, 0x49, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x73, 0x10,
	0x02, 0x12, 0x11, 0x0a, 0x0d, 0x41, 0x72, 0x74, 0x69, 0x66, 0x61, 0x63, 0x74, 0x54, 0x69, 0x6d,
	0x65, 0x64, 0x10, 0x04, 0x12, 0x0e, 0x0a, 0x0a, 0x41, 0x74, 0x74, 0x61, 0x63, 0x68, 0x6d, 0x65,
	0x6e, 0x74, 0x10, 0x05, 0x12, 0x0c, 0x0a, 0x08, 0x42, 0x79, 0x41, 0x70, 0x69, 0x4b, 0x65, 0x79,
	0x10, 0x06, 0x12, 0x0a, 0x0a, 0x06, 0x42, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x10, 0x07, 0x12, 0x0b,
	0x0a, 0x07, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x10, 0x08, 0x22, 0x32, 0x0a, 0x0c, 0x41,
	0x72, 0x74, 0x69, 0x66, 0x61, 0x63, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x0a, 0x0a, 0x06, 0x44,
	0x69, 0x72, 0x65, 0x63, 0x74, 0x10, 0x00, 0x12, 0x0c, 0x0a, 0x08, 0x49, 0x6e, 0x64, 0x69, 0x72,
	0x65, 0x63, 0x74, 0x10, 0x01, 0x12, 0x08, 0x0a, 0x04, 0x42, 0x61, 0x73, 0x65, 0x10, 0x02, 0x22,
	0x83, 0x02, 0x0a, 0x05, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x12, 0x0e, 0x0a, 0x02, 0x74, 0x78, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x02, 0x74,
	0x78, 0x12, 0x38, 0x0a, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x52, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x40, 0x0a, 0x0d, 0x61,
	0x70, 0x69, 0x6b, 0x65, 0x79, 0x52, 0x65, 0x76, 0x6f, 0x6b, 0x65, 0x64, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0d,
	0x61, 0x70, 0x69, 0x6b, 0x65, 0x79, 0x52, 0x65, 0x76, 0x6f, 0x6b, 0x65, 0x64, 0x12, 0x1e, 0x0a,
	0x0a, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0a, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x26, 0x0a,
	0x05, 0x70, 0x72, 0x6f, 0x6f, 0x66, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x6c,
	0x63, 0x2e, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x2e, 0x50, 0x72, 0x6f, 0x6f, 0x66, 0x52, 0x05,
	0x70, 0x72, 0x6f, 0x6f, 0x66, 0x22, 0x37, 0x0a, 0x09, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x4c, 0x69,
	0x73, 0x74, 0x12, 0x2a, 0x0a, 0x07, 0x65, 0x6e, 0x74, 0x72, 0x69, 0x65, 0x73, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x6c, 0x63, 0x2e, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x2e,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x07, 0x65, 0x6e, 0x74, 0x72, 0x69, 0x65, 0x73, 0x22, 0x87,
	0x02, 0x0a, 0x16, 0x56, 0x43, 0x4e, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x68, 0x61, 0x73,
	0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x68, 0x61, 0x73, 0x68, 0x12, 0x3f, 0x0a,
	0x03, 0x6f, 0x70, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x6c, 0x63, 0x2e,
	0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x2e, 0x56, 0x43, 0x4e, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x73,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x56, 0x43,
	0x4e, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x4f, 0x70, 0x52, 0x03, 0x6f, 0x70, 0x73, 0x1a, 0x70,
	0x0a, 0x0b, 0x56, 0x43, 0x4e, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x4f, 0x70, 0x12, 0x49, 0x0a,
	0x06, 0x6f, 0x70, 0x54, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x31, 0x2e,
	0x6c, 0x63, 0x2e, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x2e, 0x56, 0x43, 0x4e, 0x4c, 0x61, 0x62,
	0x65, 0x6c, 0x73, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x2e, 0x56, 0x43, 0x4e, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x4f, 0x70, 0x54, 0x79, 0x70, 0x65,
	0x52, 0x06, 0x6f, 0x70, 0x54, 0x79, 0x70, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x6c, 0x61, 0x62, 0x65,
	0x6c, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x06, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73,
	0x22, 0x26, 0x0a, 0x0f, 0x56, 0x43, 0x4e, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x4f, 0x70, 0x54,
	0x79, 0x70, 0x65, 0x12, 0x07, 0x0a, 0x03, 0x41, 0x44, 0x44, 0x10, 0x00, 0x12, 0x0a, 0x0a, 0x06,
	0x44, 0x45, 0x4c, 0x45, 0x54, 0x45, 0x10, 0x01, 0x22, 0x54, 0x0a, 0x17, 0x56, 0x43, 0x4e, 0x4c,
	0x61, 0x62, 0x65, 0x6c, 0x73, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x39, 0x0a, 0x0b, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x69, 0x6d, 0x6d, 0x75, 0x64,
	0x62, 0x2e, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x2e, 0x54, 0x78, 0x48, 0x65, 0x61, 0x64, 0x65,
	0x72, 0x52, 0x0b, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x41,
	0x0a, 0x13, 0x56, 0x43, 0x4e, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x53, 0x65, 0x74, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x68, 0x61, 0x73, 0x68, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x68, 0x61, 0x73, 0x68, 0x12, 0x16, 0x0a, 0x06, 0x6c, 0x61, 0x62,
	0x65, 0x6c, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x06, 0x6c, 0x61, 0x62, 0x65, 0x6c,
	0x73, 0x22, 0x53, 0x0a, 0x17, 0x56, 0x43, 0x4e, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x42, 0x75,
	0x6c, 0x6b, 0x53, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x38, 0x0a, 0x07,
	0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e,
	0x6c, 0x63, 0x2e, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x2e, 0x56, 0x43, 0x4e, 0x4c, 0x61, 0x62,
	0x65, 0x6c, 0x73, 0x53, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x07, 0x72,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x51, 0x0a, 0x14, 0x56, 0x43, 0x4e, 0x4c, 0x61, 0x62,
	0x65, 0x6c, 0x73, 0x53, 0x65, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x39,
	0x0a, 0x0b, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x69, 0x6d, 0x6d, 0x75, 0x64, 0x62, 0x2e, 0x73, 0x63, 0x68,
	0x65, 0x6d, 0x61, 0x2e, 0x54, 0x78, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x52, 0x0b, 0x74, 0x72,
	0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x45, 0x0a, 0x13, 0x56, 0x43, 0x4e,
	0x4c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x47, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x12, 0x0a, 0x04, 0x68, 0x61, 0x73, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x68, 0x61, 0x73, 0x68, 0x12, 0x1a, 0x0a, 0x08, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x72, 0x49, 0x44,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x72, 0x49, 0x44,
	0x22, 0x2e, 0x0a, 0x14, 0x56, 0x43, 0x4e, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x47, 0x65, 0x74,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x6c, 0x61, 0x62, 0x65,
	0x6c, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x06, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73,
	0x22, 0x81, 0x01, 0x0a, 0x17, 0x56, 0x43, 0x4e, 0x47, 0x65, 0x74, 0x41, 0x74, 0x74, 0x61, 0x63,
	0x68, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1a, 0x0a, 0x08,
	0x73, 0x69, 0x67, 0x6e, 0x65, 0x72, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x73, 0x69, 0x67, 0x6e, 0x65, 0x72, 0x49, 0x44, 0x12, 0x22, 0x0a, 0x0c, 0x61, 0x72, 0x74, 0x69,
	0x66, 0x61, 0x63, 0x74, 0x48, 0x61, 0x73, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c,
	0x61, 0x72, 0x74, 0x69, 0x66, 0x61, 0x63, 0x74, 0x48, 0x61, 0x73, 0x68, 0x12, 0x26, 0x0a, 0x0e,
	0x61, 0x74, 0x74, 0x61, 0x63, 0x68, 0x6d, 0x65, 0x6e, 0x74, 0x48, 0x61, 0x73, 0x68, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x61, 0x74, 0x74, 0x61, 0x63, 0x68, 0x6d, 0x65, 0x6e, 0x74,
	0x48, 0x61, 0x73, 0x68, 0x22, 0x3a, 0x0a, 0x18, 0x56, 0x43, 0x4e, 0x47, 0x65, 0x74, 0x41, 0x74,
	0x74, 0x61, 0x63, 0x68, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x1e, 0x0a, 0x0a, 0x61, 0x74, 0x74, 0x61, 0x63, 0x68, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0c, 0x52, 0x0a, 0x61, 0x74, 0x74, 0x61, 0x63, 0x68, 0x6d, 0x65, 0x6e, 0x74,
	0x32, 0xd2, 0x15, 0x0a, 0x09, 0x4c, 0x63, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x3b,
	0x0a, 0x03, 0x53, 0x65, 0x74, 0x12, 0x19, 0x2e, 0x69, 0x6d, 0x6d, 0x75, 0x64, 0x62, 0x2e, 0x73,
	0x63, 0x68, 0x65, 0x6d, 0x61, 0x2e, 0x53, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x17, 0x2e, 0x69, 0x6d, 0x6d, 0x75, 0x64, 0x62, 0x2e, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61,
	0x2e, 0x54, 0x78, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x22, 0x00, 0x12, 0x45, 0x0a, 0x08, 0x53,
	0x65, 0x74, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x12, 0x1a, 0x2e, 0x6c, 0x63, 0x2e, 0x73, 0x63, 0x68,
	0x65, 0x6d, 0x61, 0x2e, 0x53, 0x65, 0x74, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x1b, 0x2e, 0x6c, 0x63, 0x2e, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x2e,
	0x53, 0x65, 0x74, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x00, 0x12, 0x54, 0x0a, 0x0f, 0x56, 0x43, 0x4e, 0x53, 0x65, 0x74, 0x41, 0x72, 0x74, 0x69,
	0x66, 0x61, 0x63, 0x74, 0x73, 0x12, 0x1e, 0x2e, 0x6c, 0x63, 0x2e, 0x73, 0x63, 0x68, 0x65, 0x6d,
	0x61, 0x2e, 0x56, 0x43, 0x4e, 0x41, 0x72, 0x74, 0x69, 0x66, 0x61, 0x63, 0x74, 0x73, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1f, 0x2e, 0x6c, 0x63, 0x2e, 0x73, 0x63, 0x68, 0x65, 0x6d,
	0x61, 0x2e, 0x56, 0x43, 0x4e, 0x41, 0x72, 0x74, 0x69, 0x66, 0x61, 0x63, 0x74, 0x73, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x49, 0x0a, 0x12, 0x56, 0x43, 0x4e, 0x53,
	0x65, 0x61, 0x72, 0x63, 0x68, 0x41, 0x72, 0x74, 0x69, 0x66, 0x61, 0x63, 0x74, 0x73, 0x12, 0x1b,
	0x2e, 0x6c, 0x63, 0x2e, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x2e, 0x56, 0x43, 0x4e, 0x53, 0x65,
	0x61, 0x72, 0x63, 0x68, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x14, 0x2e, 0x6c, 0x63,
	0x2e, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x2e, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x4c, 0x69, 0x73,
	0x74, 0x22, 0x00, 0x12, 0x4c, 0x0a, 0x0f, 0x56, 0x43, 0x4e, 0x47, 0x65, 0x74, 0x41, 0x72, 0x74,
	0x69, 0x66, 0x61, 0x63, 0x74, 0x73, 0x12, 0x21, 0x2e, 0x6c, 0x63, 0x2e, 0x73, 0x63, 0x68, 0x65,
	0x6d, 0x61, 0x2e, 0x56, 0x43, 0x4e, 0x41, 0x72, 0x74, 0x69, 0x66, 0x61, 0x63, 0x74, 0x73, 0x47,
	0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x14, 0x2e, 0x6c, 0x63, 0x2e, 0x73,
	0x63, 0x68, 0x65, 0x6d, 0x61, 0x2e, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x4c, 0x69, 0x73, 0x74, 0x22,
	0x00, 0x12, 0x51, 0x0a, 0x0c, 0x56, 0x43, 0x4e, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x47, 0x65,
	0x74, 0x12, 0x1e, 0x2e, 0x6c, 0x63, 0x2e, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x2e, 0x56, 0x43,
	0x4e, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x47, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x1f, 0x2e, 0x6c, 0x63, 0x2e, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x2e, 0x56, 0x43,
	0x4e, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x47, 0x65, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0x00, 0x12, 0x51, 0x0a, 0x0c, 0x56, 0x43, 0x4e, 0x4c, 0x61, 0x62, 0x65, 0x6c,
	0x73, 0x53, 0x65, 0x74, 0x12, 0x1e, 0x2e, 0x6c, 0x63, 0x2e, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61,
	0x2e, 0x56, 0x43, 0x4e, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x53, 0x65, 0x74, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x1f, 0x2e, 0x6c, 0x63, 0x2e, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61,
	0x2e, 0x56, 0x43, 0x4e, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x53, 0x65, 0x74, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x59, 0x0a, 0x10, 0x56, 0x43, 0x4e, 0x4c, 0x61,
	0x62, 0x65, 0x6c, 0x73, 0x42, 0x75, 0x6c, 0x6b, 0x53, 0x65, 0x74, 0x12, 0x22, 0x2e, 0x6c, 0x63,
	0x2e, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x2e, 0x56, 0x43, 0x4e, 0x4c, 0x61, 0x62, 0x65, 0x6c,
	0x73, 0x42, 0x75, 0x6c, 0x6b, 0x53, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x1f, 0x2e, 0x6c, 0x63, 0x2e, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x2e, 0x56, 0x43, 0x4e, 0x4c,
	0x61, 0x62, 0x65, 0x6c, 0x73, 0x53, 0x65, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x00, 0x12, 0x5a, 0x0a, 0x0f, 0x56, 0x43, 0x4e, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x12, 0x21, 0x2e, 0x6c, 0x63, 0x2e, 0x73, 0x63, 0x68, 0x65, 0x6d,
	0x61, 0x2e, 0x56, 0x43, 0x4e, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x22, 0x2e, 0x6c, 0x63, 0x2e, 0x73, 0x63,
	0x68, 0x65, 0x6d, 0x61, 0x2e, 0x56, 0x43, 0x4e, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x5d,
	0x0a, 0x10, 0x56, 0x43, 0x4e, 0x47, 0x65, 0x74, 0x41, 0x74, 0x74, 0x61, 0x63, 0x68, 0x6d, 0x65,
	0x6e, 0x74, 0x12, 0x22, 0x2e, 0x6c, 0x63, 0x2e, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x2e, 0x56,
	0x43, 0x4e, 0x47, 0x65, 0x74, 0x41, 0x74, 0x74, 0x61, 0x63, 0x68, 0x6d, 0x65, 0x6e, 0x74, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x23, 0x2e, 0x6c, 0x63, 0x2e, 0x73, 0x63, 0x68, 0x65,
	0x6d, 0x61, 0x2e, 0x56, 0x43, 0x4e, 0x47, 0x65, 0x74, 0x41, 0x74, 0x74, 0x61, 0x63, 0x68, 0x6d,
	0x65, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x38, 0x0a,
	0x03, 0x47, 0x65, 0x74, 0x12, 0x19, 0x2e, 0x69, 0x6d, 0x6d, 0x75, 0x64, 0x62, 0x2e, 0x73, 0x63,
	0x68, 0x65, 0x6d, 0x61, 0x2e, 0x4b, 0x65, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x14, 0x2e, 0x69, 0x6d, 0x6d, 0x75, 0x64, 0x62, 0x2e, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x2e,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x22, 0x00, 0x12, 0x53, 0x0a, 0x0d, 0x56, 0x65, 0x72, 0x69, 0x66,
	0x69, 0x61, 0x62, 0x6c, 0x65, 0x53, 0x65, 0x74, 0x12, 0x23, 0x2e, 0x69, 0x6d, 0x6d, 0x75, 0x64,
	0x62, 0x2e, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x2e, 0x56, 0x65, 0x72, 0x69, 0x66, 0x69, 0x61,
	0x62, 0x6c, 0x65, 0x53, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1b, 0x2e,
	0x69, 0x6d, 0x6d, 0x75, 0x64, 0x62, 0x2e, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x2e, 0x56, 0x65,
	0x72, 0x69, 0x66, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x54, 0x78, 0x22, 0x00, 0x12, 0x56, 0x0a, 0x0d,
	0x56, 0x65, 0x72, 0x69, 0x66, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x47, 0x65, 0x74, 0x12, 0x23, 0x2e,
	0x69, 0x6d, 0x6d, 0x75, 0x64, 0x62, 0x2e, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x2e, 0x56, 0x65,
	0x72, 0x69, 0x66, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x47, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x1e, 0x2e, 0x69, 0x6d, 0x6d, 0x75, 0x64, 0x62, 0x2e, 0x73, 0x63, 0x68, 0x65,
	0x6d, 0x61, 0x2e, 0x56, 0x65, 0x72, 0x69, 0x66, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x22, 0x00, 0x12, 0x41, 0x0a, 0x06, 0x47, 0x65, 0x74, 0x41, 0x6c, 0x6c, 0x12, 0x1d,
	0x2e, 0x69, 0x6d, 0x6d, 0x75, 0x64, 0x62, 0x2e, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x2e, 0x4b,
	0x65, 0x79, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e,
	0x69, 0x6d, 0x6d, 0x75, 0x64, 0x62, 0x2e, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x2e, 0x45, 0x6e,
	0x74, 0x72, 0x69, 0x65, 0x73, 0x22, 0x00, 0x12, 0x43, 0x0a, 0x07, 0x45, 0x78, 0x65, 0x63, 0x41,
	0x6c, 0x6c, 0x12, 0x1d, 0x2e, 0x69, 0x6d, 0x6d, 0x75, 0x64, 0x62, 0x2e, 0x73, 0x63, 0x68, 0x65,
	0x6d, 0x61, 0x2e, 0x45, 0x78, 0x65, 0x63, 0x41, 0x6c, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x17, 0x2e, 0x69, 0x6d, 0x6d, 0x75, 0x64, 0x62, 0x2e, 0x73, 0x63, 0x68, 0x65, 0x6d,
	0x61, 0x2e, 0x54, 0x78, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x22, 0x00, 0x12, 0x3c, 0x0a, 0x04,
	0x53, 0x63, 0x61, 0x6e, 0x12, 0x1a, 0x2e, 0x69, 0x6d, 0x6d, 0x75, 0x64, 0x62, 0x2e, 0x73, 0x63,
	0x68, 0x65, 0x6d, 0x61, 0x2e, 0x53, 0x63, 0x61, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x16, 0x2e, 0x69, 0x6d, 0x6d, 0x75, 0x64, 0x62, 0x2e, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61,
	0x2e, 0x45, 0x6e, 0x74, 0x72, 0x69, 0x65, 0x73, 0x22, 0x00, 0x12, 0x42, 0x0a, 0x07, 0x48, 0x69,
	0x73, 0x74, 0x6f, 0x72, 0x79, 0x12, 0x1d, 0x2e, 0x69, 0x6d, 0x6d, 0x75, 0x64, 0x62, 0x2e, 0x73,
	0x63, 0x68, 0x65, 0x6d, 0x61, 0x2e, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x69, 0x6d, 0x6d, 0x75, 0x64, 0x62, 0x2e, 0x73, 0x63,
	0x68, 0x65, 0x6d, 0x61, 0x2e, 0x45, 0x6e, 0x74, 0x72, 0x69, 0x65, 0x73, 0x22, 0x00, 0x12, 0x3d,
	0x0a, 0x04, 0x5a, 0x41, 0x64, 0x64, 0x12, 0x1a, 0x2e, 0x69, 0x6d, 0x6d, 0x75, 0x64, 0x62, 0x2e,
	0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x2e, 0x5a, 0x41, 0x64, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x17, 0x2e, 0x69, 0x6d, 0x6d, 0x75, 0x64, 0x62, 0x2e, 0x73, 0x63, 0x68, 0x65,
	0x6d, 0x61, 0x2e, 0x54, 0x78, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x22, 0x00, 0x12, 0x55, 0x0a,
	0x0e, 0x56, 0x65, 0x72, 0x69, 0x66, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x5a, 0x41, 0x64, 0x64, 0x12,
	0x24, 0x2e, 0x69, 0x6d, 0x6d, 0x75, 0x64, 0x62, 0x2e, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x2e,
	0x56, 0x65, 0x72, 0x69, 0x66, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x5a, 0x41, 0x64, 0x64, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1b, 0x2e, 0x69, 0x6d, 0x6d, 0x75, 0x64, 0x62, 0x2e, 0x73,
	0x63, 0x68, 0x65, 0x6d, 0x61, 0x2e, 0x56, 0x65, 0x72, 0x69, 0x66, 0x69, 0x61, 0x62, 0x6c, 0x65,
	0x54, 0x78, 0x22, 0x00, 0x12, 0x3f, 0x0a, 0x05, 0x5a, 0x53, 0x63, 0x61, 0x6e, 0x12, 0x1b, 0x2e,
	0x69, 0x6d, 0x6d, 0x75, 0x64, 0x62, 0x2e, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x2e, 0x5a, 0x53,
	0x63, 0x61, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x17, 0x2e, 0x69, 0x6d, 0x6d,
	0x75, 0x64, 0x62, 0x2e, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x2e, 0x5a, 0x45, 0x6e, 0x74, 0x72,
	0x69, 0x65, 0x73, 0x22, 0x00, 0x12, 0x47, 0x0a, 0x0c, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74,
	0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a, 0x1d, 0x2e,
	0x69, 0x6d, 0x6d, 0x75, 0x64, 0x62, 0x2e, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x2e, 0x49, 0x6d,
	0x6d, 0x75, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x22, 0x00, 0x12, 0x41,
	0x0a, 0x06, 0x48, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x12, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79,
	0x1a, 0x1d, 0x2e, 0x69, 0x6d, 0x6d, 0x75, 0x64, 0x62, 0x2e, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61,
	0x2e, 0x48, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x00, 0x12, 0x42, 0x0a, 0x0c, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x54, 0x61, 0x6d, 0x70, 0x65,
	0x72, 0x12, 0x18, 0x2e, 0x6c, 0x63, 0x2e, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x2e, 0x52, 0x65,
	0x70, 0x6f, 0x72, 0x74, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x1a, 0x16, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d,
	0x70, 0x74, 0x79, 0x22, 0x00, 0x12, 0x36, 0x0a, 0x08, 0x53, 0x65, 0x6e, 0x64, 0x44, 0x61, 0x74,
	0x61, 0x12, 0x0f, 0x2e, 0x6c, 0x63, 0x2e, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x2e, 0x44, 0x61,
	0x74, 0x61, 0x1a, 0x13, 0x2e, 0x6c, 0x63, 0x2e, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x2e, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x28, 0x01, 0x30, 0x01, 0x12, 0x57, 0x0a,
	0x10, 0x56, 0x65, 0x72, 0x69, 0x66, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x47, 0x65, 0x74, 0x45, 0x78,
	0x74, 0x12, 0x23, 0x2e, 0x69, 0x6d, 0x6d, 0x75, 0x64, 0x62, 0x2e, 0x73, 0x63, 0x68, 0x65, 0x6d,
	0x61, 0x2e, 0x56, 0x65, 0x72, 0x69, 0x66, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x47, 0x65, 0x74, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1c, 0x2e, 0x6c, 0x63, 0x2e, 0x73, 0x63, 0x68, 0x65,
	0x6d, 0x61, 0x2e, 0x56, 0x65, 0x72, 0x69, 0x66, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x49, 0x74, 0x65,
	0x6d, 0x45, 0x78, 0x74, 0x22, 0x00, 0x12, 0x6c, 0x0a, 0x15, 0x56, 0x65, 0x72, 0x69, 0x66, 0x69,
	0x61, 0x62, 0x6c, 0x65, 0x47, 0x65, 0x74, 0x45, 0x78, 0x74, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x12,
	0x27, 0x2e, 0x6c, 0x63, 0x2e, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x2e, 0x56, 0x65, 0x72, 0x69,
	0x66, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x47, 0x65, 0x74, 0x45, 0x78, 0x74, 0x4d, 0x75, 0x6c, 0x74,
	0x69, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x28, 0x2e, 0x6c, 0x63, 0x2e, 0x73, 0x63,
	0x68, 0x65, 0x6d, 0x61, 0x2e, 0x56, 0x65, 0x72, 0x69, 0x66, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x47,
	0x65, 0x74, 0x45, 0x78, 0x74, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0x00, 0x12, 0x42, 0x0a, 0x08, 0x5a, 0x53, 0x63, 0x61, 0x6e, 0x45, 0x78, 0x74,
	0x12, 0x1b, 0x2e, 0x69, 0x6d, 0x6d, 0x75, 0x64, 0x62, 0x2e, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61,
	0x2e, 0x5a, 0x53, 0x63, 0x61, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x17, 0x2e,
	0x6c, 0x63, 0x2e, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x2e, 0x5a, 0x49, 0x74, 0x65, 0x6d, 0x45,
	0x78, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x22, 0x00, 0x12, 0x45, 0x0a, 0x0a, 0x48, 0x69, 0x73, 0x74,
	0x6f, 0x72, 0x79, 0x45, 0x78, 0x74, 0x12, 0x1d, 0x2e, 0x69, 0x6d, 0x6d, 0x75, 0x64, 0x62, 0x2e,
	0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x2e, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x6c, 0x63, 0x2e, 0x73, 0x63, 0x68, 0x65, 0x6d,
	0x61, 0x2e, 0x49, 0x74, 0x65, 0x6d, 0x45, 0x78, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x22, 0x00, 0x12,
	0x36, 0x0a, 0x05, 0x46, 0x65, 0x61, 0x74, 0x73, 0x12, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79,
	0x1a, 0x13, 0x2e, 0x6c, 0x63, 0x2e, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x2e, 0x46, 0x65, 0x61,
	0x74, 0x75, 0x72, 0x65, 0x73, 0x22, 0x00, 0x12, 0x40, 0x0a, 0x09, 0x73, 0x74, 0x72, 0x65, 0x61,
	0x6d, 0x47, 0x65, 0x74, 0x12, 0x19, 0x2e, 0x69, 0x6d, 0x6d, 0x75, 0x64, 0x62, 0x2e, 0x73, 0x63,
	0x68, 0x65, 0x6d, 0x61, 0x2e, 0x4b, 0x65, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x14, 0x2e, 0x69, 0x6d, 0x6d, 0x75, 0x64, 0x62, 0x2e, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x2e,
	0x43, 0x68, 0x75, 0x6e, 0x6b, 0x22, 0x00, 0x30, 0x01, 0x12, 0x3e, 0x0a, 0x09, 0x73, 0x74, 0x72,
	0x65, 0x61, 0x6d, 0x53, 0x65, 0x74, 0x12, 0x14, 0x2e, 0x69, 0x6d, 0x6d, 0x75, 0x64, 0x62, 0x2e,
	0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x2e, 0x43, 0x68, 0x75, 0x6e, 0x6b, 0x1a, 0x17, 0x2e, 0x69,
	0x6d, 0x6d, 0x75, 0x64, 0x62, 0x2e, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x2e, 0x54, 0x78, 0x48,
	0x65, 0x61, 0x64, 0x65, 0x72, 0x22, 0x00, 0x28, 0x01, 0x12, 0x54, 0x0a, 0x13, 0x73, 0x74, 0x72,
	0x65, 0x61, 0x6d, 0x56, 0x65, 0x72, 0x69, 0x66, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x47, 0x65, 0x74,
	0x12, 0x23, 0x2e, 0x69, 0x6d, 0x6d, 0x75, 0x64, 0x62, 0x2e, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61,
	0x2e, 0x56, 0x65, 0x72, 0x69, 0x66, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x47, 0x65, 0x74, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x14, 0x2e, 0x69, 0x6d, 0x6d, 0x75, 0x64, 0x62, 0x2e, 0x73,
	0x63, 0x68, 0x65, 0x6d, 0x61, 0x2e, 0x43, 0x68, 0x75, 0x6e, 0x6b, 0x22, 0x00, 0x30, 0x01, 0x12,
	0x4c, 0x0a, 0x13, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x56, 0x65, 0x72, 0x69, 0x66, 0x69, 0x61,
	0x62, 0x6c, 0x65, 0x53, 0x65, 0x74, 0x12, 0x14, 0x2e, 0x69, 0x6d, 0x6d, 0x75, 0x64, 0x62, 0x2e,
	0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x2e, 0x43, 0x68, 0x75, 0x6e, 0x6b, 0x1a, 0x1b, 0x2e, 0x69,
	0x6d, 0x6d, 0x75, 0x64, 0x62, 0x2e, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x2e, 0x56, 0x65, 0x72,
	0x69, 0x66, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x54, 0x78, 0x22, 0x00, 0x28, 0x01, 0x12, 0x42, 0x0a,
	0x0a, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x53, 0x63, 0x61, 0x6e, 0x12, 0x1a, 0x2e, 0x69, 0x6d,
	0x6d, 0x75, 0x64, 0x62, 0x2e, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x2e, 0x53, 0x63, 0x61, 0x6e,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x14, 0x2e, 0x69, 0x6d, 0x6d, 0x75, 0x64, 0x62,
	0x2e, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x2e, 0x43, 0x68, 0x75, 0x6e, 0x6b, 0x22, 0x00, 0x30,
	0x01, 0x12, 0x44, 0x0a, 0x0b, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x5a, 0x53, 0x63, 0x61, 0x6e,
	0x12, 0x1b, 0x2e, 0x69, 0x6d, 0x6d, 0x75, 0x64, 0x62, 0x2e, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61,
	0x2e, 0x5a, 0x53, 0x63, 0x61, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x14, 0x2e,
	0x69, 0x6d, 0x6d, 0x75, 0x64, 0x62, 0x2e, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x2e, 0x43, 0x68,
	0x75, 0x6e, 0x6b, 0x22, 0x00, 0x30, 0x01, 0x12, 0x48, 0x0a, 0x0d, 0x73, 0x74, 0x72, 0x65, 0x61,
	0x6d, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x12, 0x1d, 0x2e, 0x69, 0x6d, 0x6d, 0x75, 0x64,
	0x62, 0x2e, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x2e, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x14, 0x2e, 0x69, 0x6d, 0x6d, 0x75, 0x64, 0x62,
	0x2e, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x2e, 0x43, 0x68, 0x75, 0x6e, 0x6b, 0x22, 0x00, 0x30,
	0x01, 0x12, 0x42, 0x0a, 0x0d, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x45, 0x78, 0x65, 0x63, 0x41,
	0x6c, 0x6c, 0x12, 0x14, 0x2e, 0x69, 0x6d, 0x6d, 0x75, 0x64, 0x62, 0x2e, 0x73, 0x63, 0x68, 0x65,
	0x6d, 0x61, 0x2e, 0x43, 0x68, 0x75, 0x6e, 0x6b, 0x1a, 0x17, 0x2e, 0x69, 0x6d, 0x6d, 0x75, 0x64,
	0x62, 0x2e, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x2e, 0x54, 0x78, 0x48, 0x65, 0x61, 0x64, 0x65,
	0x72, 0x22, 0x00, 0x28, 0x01, 0x42, 0x36, 0x5a, 0x34, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e,
	0x63, 0x6f, 0x6d, 0x2f, 0x76, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x2d, 0x75, 0x73, 0x2f, 0x6c, 0x65,
	0x64, 0x67, 0x65, 0x72, 0x2d, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x69, 0x61, 0x6e, 0x63, 0x65, 0x2f,
	0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2f, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x62, 0x06, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_lc_proto_rawDescOnce sync.Once
	file_lc_proto_rawDescData = file_lc_proto_rawDesc
)

func file_lc_proto_rawDescGZIP() []byte {
	file_lc_proto_rawDescOnce.Do(func() {
		file_lc_proto_rawDescData = protoimpl.X.CompressGZIP(file_lc_proto_rawDescData)
	})
	return file_lc_proto_rawDescData
}

var file_lc_proto_enumTypes = make([]protoimpl.EnumInfo, 4)
var file_lc_proto_msgTypes = make([]protoimpl.MessageInfo, 35)
var file_lc_proto_goTypes = []interface{}{
	(VCNDependency_Type)(0),                     // 0: lc.schema.VCNDependency.Type
	(VCNSearchRequest_Type)(0),                  // 1: lc.schema.VCNSearchRequest.Type
	(VCNSearchRequest_ArtifactType)(0),          // 2: lc.schema.VCNSearchRequest.ArtifactType
	(VCNLabelsUpdateRequest_VCNLabelsOpType)(0), // 3: lc.schema.VCNLabelsUpdateRequest.VCNLabelsOpType
	(*TamperReport)(nil),                        // 4: lc.schema.TamperReport
	(*ReportOptions)(nil),                       // 5: lc.schema.ReportOptions
	(*DataValue)(nil),                           // 6: lc.schema.DataValue
	(*Data)(nil),                                // 7: lc.schema.Data
	(*Response)(nil),                            // 8: lc.schema.Response
	(*VerifiableItemExt)(nil),                   // 9: lc.schema.VerifiableItemExt
	(*ItemExt)(nil),                             // 10: lc.schema.ItemExt
	(*ItemExtList)(nil),                         // 11: lc.schema.ItemExtList
	(*ZItemExt)(nil),                            // 12: lc.schema.ZItemExt
	(*ZItemExtList)(nil),                        // 13: lc.schema.ZItemExtList
	(*Features)(nil),                            // 14: lc.schema.Features
	(*VerifiableGetExtMultiRequest)(nil),        // 15: lc.schema.VerifiableGetExtMultiRequest
	(*VerifiableGetExtMultiResponse)(nil),       // 16: lc.schema.VerifiableGetExtMultiResponse
	(*SetMultiRequest)(nil),                     // 17: lc.schema.SetMultiRequest
	(*SetMultiResponse)(nil),                    // 18: lc.schema.SetMultiResponse
	(*VCNAttachment)(nil),                       // 19: lc.schema.VCNAttachment
	(*VCNDependency)(nil),                       // 20: lc.schema.VCNDependency
	(*VCNArtifact)(nil),                         // 21: lc.schema.VCNArtifact
	(*VCNArtifactsRequest)(nil),                 // 22: lc.schema.VCNArtifactsRequest
	(*VCNArtifactsGetRequest)(nil),              // 23: lc.schema.VCNArtifactsGetRequest
	(*Proof)(nil),                               // 24: lc.schema.Proof
	(*VCNArtifactsResponse)(nil),                // 25: lc.schema.VCNArtifactsResponse
	(*VCNSearchRequest)(nil),                    // 26: lc.schema.VCNSearchRequest
	(*Entry)(nil),                               // 27: lc.schema.Entry
	(*EntryList)(nil),                           // 28: lc.schema.EntryList
	(*VCNLabelsUpdateRequest)(nil),              // 29: lc.schema.VCNLabelsUpdateRequest
	(*VCNLabelsUpdateResponse)(nil),             // 30: lc.schema.VCNLabelsUpdateResponse
	(*VCNLabelsSetRequest)(nil),                 // 31: lc.schema.VCNLabelsSetRequest
	(*VCNLabelsBulkSetRequest)(nil),             // 32: lc.schema.VCNLabelsBulkSetRequest
	(*VCNLabelsSetResponse)(nil),                // 33: lc.schema.VCNLabelsSetResponse
	(*VCNLabelsGetRequest)(nil),                 // 34: lc.schema.VCNLabelsGetRequest
	(*VCNLabelsGetResponse)(nil),                // 35: lc.schema.VCNLabelsGetResponse
	(*VCNGetAttachmentRequest)(nil),             // 36: lc.schema.VCNGetAttachmentRequest
	(*VCNGetAttachmentResponse)(nil),            // 37: lc.schema.VCNGetAttachmentResponse
	(*VCNLabelsUpdateRequest_VCNLabelsOp)(nil),  // 38: lc.schema.VCNLabelsUpdateRequest.VCNLabelsOp
	(*schema.Signature)(nil),                    // 39: immudb.schema.Signature
	(*schema.VerifiableTx)(nil),                 // 40: immudb.schema.VerifiableTx
	(*schema.ImmutableState)(nil),               // 41: immudb.schema.ImmutableState
	(*schema.VerifiableEntry)(nil),              // 42: immudb.schema.VerifiableEntry
	(*timestamp.Timestamp)(nil),                 // 43: google.protobuf.Timestamp
	(*schema.Entry)(nil),                        // 44: immudb.schema.Entry
	(*schema.ZEntry)(nil),                       // 45: immudb.schema.ZEntry
	(*schema.VerifiableGetRequest)(nil),         // 46: immudb.schema.VerifiableGetRequest
	(*schema.SetRequest)(nil),                   // 47: immudb.schema.SetRequest
	(*schema.TxHeader)(nil),                     // 48: immudb.schema.TxHeader
	(*schema.InclusionProof)(nil),               // 49: immudb.schema.InclusionProof
	(*schema.KVMetadata)(nil),                   // 50: immudb.schema.KVMetadata
	(*schema.KeyRequest)(nil),                   // 51: immudb.schema.KeyRequest
	(*schema.VerifiableSetRequest)(nil),         // 52: immudb.schema.VerifiableSetRequest
	(*schema.KeyListRequest)(nil),               // 53: immudb.schema.KeyListRequest
	(*schema.ExecAllRequest)(nil),               // 54: immudb.schema.ExecAllRequest
	(*schema.ScanRequest)(nil),                  // 55: immudb.schema.ScanRequest
	(*schema.HistoryRequest)(nil),               // 56: immudb.schema.HistoryRequest
	(*schema.ZAddRequest)(nil),                  // 57: immudb.schema.ZAddRequest
	(*schema.VerifiableZAddRequest)(nil),        // 58: immudb.schema.VerifiableZAddRequest
	(*schema.ZScanRequest)(nil),                 // 59: immudb.schema.ZScanRequest
	(*empty.Empty)(nil),                         // 60: google.protobuf.Empty
	(*schema.Chunk)(nil),                        // 61: immudb.schema.Chunk
	(*schema.Entries)(nil),                      // 62: immudb.schema.Entries
	(*schema.ZEntries)(nil),                     // 63: immudb.schema.ZEntries
	(*schema.HealthResponse)(nil),               // 64: immudb.schema.HealthResponse
}
var file_lc_proto_depIdxs = []int32{
	4,  // 0: lc.schema.ReportOptions.payload:type_name -> lc.schema.TamperReport
	39, // 1: lc.schema.ReportOptions.signature:type_name -> immudb.schema.Signature
	40, // 2: lc.schema.Response.VerifiableTx:type_name -> immudb.schema.VerifiableTx
	41, // 3: lc.schema.Response.state:type_name -> immudb.schema.ImmutableState
	42, // 4: lc.schema.VerifiableItemExt.item:type_name -> immudb.schema.VerifiableEntry
	43, // 5: lc.schema.VerifiableItemExt.timestamp:type_name -> google.protobuf.Timestamp
	43, // 6: lc.schema.VerifiableItemExt.apikeyRevoked:type_name -> google.protobuf.Timestamp
	44, // 7: lc.schema.ItemExt.item:type_name -> immudb.schema.Entry
	43, // 8: lc.schema.ItemExt.timestamp:type_name -> google.protobuf.Timestamp
	43, // 9: lc.schema.ItemExt.apikeyRevoked:type_name -> google.protobuf.Timestamp
	10, // 10: lc.schema.ItemExtList.items:type_name -> lc.schema.ItemExt
	45, // 11: lc.schema.ZItemExt.item:type_name -> immudb.schema.ZEntry
	43, // 12: lc.schema.ZItemExt.timestamp:type_name -> google.protobuf.Timestamp
	43, // 13: lc.schema.ZItemExt.apikeyRevoked:type_name -> google.protobuf.Timestamp
	12, // 14: lc.schema.ZItemExtList.items:type_name -> lc.schema.ZItemExt
	46, // 15: lc.schema.VerifiableGetExtMultiRequest.requests:type_name -> immudb.schema.VerifiableGetRequest
	9,  // 16: lc.schema.VerifiableGetExtMultiResponse.items:type_name -> lc.schema.VerifiableItemExt
	47, // 17: lc.schema.SetMultiRequest.requests:type_name -> immudb.schema.SetRequest
	48, // 18: lc.schema.SetMultiResponse.transactions:type_name -> immudb.schema.TxHeader
	0,  // 19: lc.schema.VCNDependency.type:type_name -> lc.schema.VCNDependency.Type
	20, // 20: lc.schema.VCNArtifact.dependencies:type_name -> lc.schema.VCNDependency
	19, // 21: lc.schema.VCNArtifact.attachments:type_name -> lc.schema.VCNAttachment
	21, // 22: lc.schema.VCNArtifactsRequest.artifacts:type_name -> lc.schema.VCNArtifact
	43, // 23: lc.schema.VCNArtifactsRequest.signedAt:type_name -> google.protobuf.Timestamp
	40, // 24: lc.schema.Proof.verifiableTx:type_name -> immudb.schema.VerifiableTx
	49, // 25: lc.schema.Proof.inclusionProof:type_name -> immudb.schema.InclusionProof
	50, // 26: lc.schema.Proof.metadata:type_name -> immudb.schema.KVMetadata
	48, // 27: lc.schema.VCNArtifactsResponse.transaction:type_name -> immudb.schema.TxHeader
	2,  // 28: lc.schema.VCNSearchRequest.aType:type_name -> lc.schema.VCNSearchRequest.ArtifactType
	1,  // 29: lc.schema.VCNSearchRequest.type:type_name -> lc.schema.VCNSearchRequest.Type
	43, // 30: lc.schema.Entry.timestamp:type_name -> google.protobuf.Timestamp
	43, // 31: lc.schema.Entry.apikeyRevoked:type_name -> google.protobuf.Timestamp
	24, // 32: lc.schema.Entry.proof:type_name -> lc.schema.Proof
	27, // 33: lc.schema.EntryList.entries:type_name -> lc.schema.Entry
	38, // 34: lc.schema.VCNLabelsUpdateRequest.ops:type_name -> lc.schema.VCNLabelsUpdateRequest.VCNLabelsOp
	48, // 35: lc.schema.VCNLabelsUpdateResponse.transaction:type_name -> immudb.schema.TxHeader
	31, // 36: lc.schema.VCNLabelsBulkSetRequest.request:type_name -> lc.schema.VCNLabelsSetRequest
	48, // 37: lc.schema.VCNLabelsSetResponse.transaction:type_name -> immudb.schema.TxHeader
	3,  // 38: lc.schema.VCNLabelsUpdateRequest.VCNLabelsOp.opType:type_name -> lc.schema.VCNLabelsUpdateRequest.VCNLabelsOpType
	47, // 39: lc.schema.LcService.Set:input_type -> immudb.schema.SetRequest
	17, // 40: lc.schema.LcService.SetMulti:input_type -> lc.schema.SetMultiRequest
	22, // 41: lc.schema.LcService.VCNSetArtifacts:input_type -> lc.schema.VCNArtifactsRequest
	26, // 42: lc.schema.LcService.VCNSearchArtifacts:input_type -> lc.schema.VCNSearchRequest
	23, // 43: lc.schema.LcService.VCNGetArtifacts:input_type -> lc.schema.VCNArtifactsGetRequest
	34, // 44: lc.schema.LcService.VCNLabelsGet:input_type -> lc.schema.VCNLabelsGetRequest
	31, // 45: lc.schema.LcService.VCNLabelsSet:input_type -> lc.schema.VCNLabelsSetRequest
	32, // 46: lc.schema.LcService.VCNLabelsBulkSet:input_type -> lc.schema.VCNLabelsBulkSetRequest
	29, // 47: lc.schema.LcService.VCNLabelsUpdate:input_type -> lc.schema.VCNLabelsUpdateRequest
	36, // 48: lc.schema.LcService.VCNGetAttachment:input_type -> lc.schema.VCNGetAttachmentRequest
	51, // 49: lc.schema.LcService.Get:input_type -> immudb.schema.KeyRequest
	52, // 50: lc.schema.LcService.VerifiableSet:input_type -> immudb.schema.VerifiableSetRequest
	46, // 51: lc.schema.LcService.VerifiableGet:input_type -> immudb.schema.VerifiableGetRequest
	53, // 52: lc.schema.LcService.GetAll:input_type -> immudb.schema.KeyListRequest
	54, // 53: lc.schema.LcService.ExecAll:input_type -> immudb.schema.ExecAllRequest
	55, // 54: lc.schema.LcService.Scan:input_type -> immudb.schema.ScanRequest
	56, // 55: lc.schema.LcService.History:input_type -> immudb.schema.HistoryRequest
	57, // 56: lc.schema.LcService.ZAdd:input_type -> immudb.schema.ZAddRequest
	58, // 57: lc.schema.LcService.VerifiableZAdd:input_type -> immudb.schema.VerifiableZAddRequest
	59, // 58: lc.schema.LcService.ZScan:input_type -> immudb.schema.ZScanRequest
	60, // 59: lc.schema.LcService.CurrentState:input_type -> google.protobuf.Empty
	60, // 60: lc.schema.LcService.Health:input_type -> google.protobuf.Empty
	5,  // 61: lc.schema.LcService.ReportTamper:input_type -> lc.schema.ReportOptions
	7,  // 62: lc.schema.LcService.SendData:input_type -> lc.schema.Data
	46, // 63: lc.schema.LcService.VerifiableGetExt:input_type -> immudb.schema.VerifiableGetRequest
	15, // 64: lc.schema.LcService.VerifiableGetExtMulti:input_type -> lc.schema.VerifiableGetExtMultiRequest
	59, // 65: lc.schema.LcService.ZScanExt:input_type -> immudb.schema.ZScanRequest
	56, // 66: lc.schema.LcService.HistoryExt:input_type -> immudb.schema.HistoryRequest
	60, // 67: lc.schema.LcService.Feats:input_type -> google.protobuf.Empty
	51, // 68: lc.schema.LcService.streamGet:input_type -> immudb.schema.KeyRequest
	61, // 69: lc.schema.LcService.streamSet:input_type -> immudb.schema.Chunk
	46, // 70: lc.schema.LcService.streamVerifiableGet:input_type -> immudb.schema.VerifiableGetRequest
	61, // 71: lc.schema.LcService.streamVerifiableSet:input_type -> immudb.schema.Chunk
	55, // 72: lc.schema.LcService.streamScan:input_type -> immudb.schema.ScanRequest
	59, // 73: lc.schema.LcService.streamZScan:input_type -> immudb.schema.ZScanRequest
	56, // 74: lc.schema.LcService.streamHistory:input_type -> immudb.schema.HistoryRequest
	61, // 75: lc.schema.LcService.streamExecAll:input_type -> immudb.schema.Chunk
	48, // 76: lc.schema.LcService.Set:output_type -> immudb.schema.TxHeader
	18, // 77: lc.schema.LcService.SetMulti:output_type -> lc.schema.SetMultiResponse
	25, // 78: lc.schema.LcService.VCNSetArtifacts:output_type -> lc.schema.VCNArtifactsResponse
	28, // 79: lc.schema.LcService.VCNSearchArtifacts:output_type -> lc.schema.EntryList
	28, // 80: lc.schema.LcService.VCNGetArtifacts:output_type -> lc.schema.EntryList
	35, // 81: lc.schema.LcService.VCNLabelsGet:output_type -> lc.schema.VCNLabelsGetResponse
	33, // 82: lc.schema.LcService.VCNLabelsSet:output_type -> lc.schema.VCNLabelsSetResponse
	33, // 83: lc.schema.LcService.VCNLabelsBulkSet:output_type -> lc.schema.VCNLabelsSetResponse
	30, // 84: lc.schema.LcService.VCNLabelsUpdate:output_type -> lc.schema.VCNLabelsUpdateResponse
	37, // 85: lc.schema.LcService.VCNGetAttachment:output_type -> lc.schema.VCNGetAttachmentResponse
	44, // 86: lc.schema.LcService.Get:output_type -> immudb.schema.Entry
	40, // 87: lc.schema.LcService.VerifiableSet:output_type -> immudb.schema.VerifiableTx
	42, // 88: lc.schema.LcService.VerifiableGet:output_type -> immudb.schema.VerifiableEntry
	62, // 89: lc.schema.LcService.GetAll:output_type -> immudb.schema.Entries
	48, // 90: lc.schema.LcService.ExecAll:output_type -> immudb.schema.TxHeader
	62, // 91: lc.schema.LcService.Scan:output_type -> immudb.schema.Entries
	62, // 92: lc.schema.LcService.History:output_type -> immudb.schema.Entries
	48, // 93: lc.schema.LcService.ZAdd:output_type -> immudb.schema.TxHeader
	40, // 94: lc.schema.LcService.VerifiableZAdd:output_type -> immudb.schema.VerifiableTx
	63, // 95: lc.schema.LcService.ZScan:output_type -> immudb.schema.ZEntries
	41, // 96: lc.schema.LcService.CurrentState:output_type -> immudb.schema.ImmutableState
	64, // 97: lc.schema.LcService.Health:output_type -> immudb.schema.HealthResponse
	60, // 98: lc.schema.LcService.ReportTamper:output_type -> google.protobuf.Empty
	8,  // 99: lc.schema.LcService.SendData:output_type -> lc.schema.Response
	9,  // 100: lc.schema.LcService.VerifiableGetExt:output_type -> lc.schema.VerifiableItemExt
	16, // 101: lc.schema.LcService.VerifiableGetExtMulti:output_type -> lc.schema.VerifiableGetExtMultiResponse
	13, // 102: lc.schema.LcService.ZScanExt:output_type -> lc.schema.ZItemExtList
	11, // 103: lc.schema.LcService.HistoryExt:output_type -> lc.schema.ItemExtList
	14, // 104: lc.schema.LcService.Feats:output_type -> lc.schema.Features
	61, // 105: lc.schema.LcService.streamGet:output_type -> immudb.schema.Chunk
	48, // 106: lc.schema.LcService.streamSet:output_type -> immudb.schema.TxHeader
	61, // 107: lc.schema.LcService.streamVerifiableGet:output_type -> immudb.schema.Chunk
	40, // 108: lc.schema.LcService.streamVerifiableSet:output_type -> immudb.schema.VerifiableTx
	61, // 109: lc.schema.LcService.streamScan:output_type -> immudb.schema.Chunk
	61, // 110: lc.schema.LcService.streamZScan:output_type -> immudb.schema.Chunk
	61, // 111: lc.schema.LcService.streamHistory:output_type -> immudb.schema.Chunk
	48, // 112: lc.schema.LcService.streamExecAll:output_type -> immudb.schema.TxHeader
	76, // [76:113] is the sub-list for method output_type
	39, // [39:76] is the sub-list for method input_type
	39, // [39:39] is the sub-list for extension type_name
	39, // [39:39] is the sub-list for extension extendee
	0,  // [0:39] is the sub-list for field type_name
}

func init() { file_lc_proto_init() }
func file_lc_proto_init() {
	if File_lc_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_lc_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TamperReport); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_lc_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReportOptions); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_lc_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DataValue); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_lc_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Data); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_lc_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Response); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_lc_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VerifiableItemExt); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_lc_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ItemExt); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_lc_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ItemExtList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_lc_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ZItemExt); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_lc_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ZItemExtList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_lc_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Features); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_lc_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VerifiableGetExtMultiRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_lc_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VerifiableGetExtMultiResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_lc_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SetMultiRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_lc_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SetMultiResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_lc_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VCNAttachment); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_lc_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VCNDependency); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_lc_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VCNArtifact); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_lc_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VCNArtifactsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_lc_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VCNArtifactsGetRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_lc_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Proof); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_lc_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VCNArtifactsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_lc_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VCNSearchRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_lc_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Entry); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_lc_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EntryList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_lc_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VCNLabelsUpdateRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_lc_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VCNLabelsUpdateResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_lc_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VCNLabelsSetRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_lc_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VCNLabelsBulkSetRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_lc_proto_msgTypes[29].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VCNLabelsSetResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_lc_proto_msgTypes[30].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VCNLabelsGetRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_lc_proto_msgTypes[31].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VCNLabelsGetResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_lc_proto_msgTypes[32].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VCNGetAttachmentRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_lc_proto_msgTypes[33].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VCNGetAttachmentResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_lc_proto_msgTypes[34].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VCNLabelsUpdateRequest_VCNLabelsOp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_lc_proto_rawDesc,
			NumEnums:      4,
			NumMessages:   35,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_lc_proto_goTypes,
		DependencyIndexes: file_lc_proto_depIdxs,
		EnumInfos:         file_lc_proto_enumTypes,
		MessageInfos:      file_lc_proto_msgTypes,
	}.Build()
	File_lc_proto = out.File
	file_lc_proto_rawDesc = nil
	file_lc_proto_goTypes = nil
	file_lc_proto_depIdxs = nil
}
